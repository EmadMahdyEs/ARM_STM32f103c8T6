
RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f0  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f0  080003f0  000103f8  2**0
                  CONTENTS
  4 .ARM          00000000  080003f0  080003f0  000103f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f0  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000431  00000000  00000000  00010421  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000013e  00000000  00000000  00010852  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000098  00000000  00000000  00010990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000070  00000000  00000000  00010a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000bf6  00000000  00000000  00010a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000002b5  00000000  00000000  0001168e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000365e  00000000  00000000  00011943  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00014fa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000174  00000000  00000000  0001501c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003d8 	.word	0x080003d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003d8 	.word	0x080003d8

08000170 <MRCC_voidInit>:
#include "../Inc/MCAL/RCC/RCC_interface.h"
#include "../Inc/MCAL/RCC/RCC_configuration.h"
#include "../Inc/MCAL/RCC/RCC_private.h"

void MRCC_voidInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	MRCC_voidSetBusClocks(RCC_AHB_BUS_PRESCALER, RCC_APB1_BUS_PRESCALER,
 8000174:	2204      	movs	r2, #4
 8000176:	2104      	movs	r1, #4
 8000178:	2008      	movs	r0, #8
 800017a:	f000 f8ab 	bl	80002d4 <MRCC_voidSetBusClocks>

	MRCC_voidEnableClockSource(RCC_HSI, RCC_STATUS_ON);
	MRCC_u8CheckClockSource(RCC_HSI);
	MRCC_voidSetClockSource(RCC_HSI);
#else
	MRCC_voidEnableClockSource(RCC_HSE, RCC_STATUS_ON);
 800017e:	2101      	movs	r1, #1
 8000180:	2011      	movs	r0, #17
 8000182:	f000 f885 	bl	8000290 <MRCC_voidEnableClockSource>
	MRCC_u8CheckClockSource(RCC_HSE);
 8000186:	2011      	movs	r0, #17
 8000188:	f000 f828 	bl	80001dc <MRCC_u8CheckClockSource>
	MRCC_voidSetClockSource(RCC_HSE);
 800018c:	2011      	movs	r0, #17
 800018e:	f000 f853 	bl	8000238 <MRCC_voidSetClockSource>
#endif

	// enable HSE /2 if used
	if (RCC_PLL_INPUT == RCC_PLL_SOURCE_HSE_2)
	SET_BIT(RCC->RCC_CFGR, 17); //PLLXTRE
 8000192:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <MRCC_voidInit+0x68>)
 8000194:	685b      	ldr	r3, [r3, #4]
 8000196:	4a10      	ldr	r2, [pc, #64]	; (80001d8 <MRCC_voidInit+0x68>)
 8000198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800019c:	6053      	str	r3, [r2, #4]

	// choose source
	SET_BIT(RCC->RCC_CFGR, 16); //PLLSRC
 800019e:	4b0e      	ldr	r3, [pc, #56]	; (80001d8 <MRCC_voidInit+0x68>)
 80001a0:	685b      	ldr	r3, [r3, #4]
 80001a2:	4a0d      	ldr	r2, [pc, #52]	; (80001d8 <MRCC_voidInit+0x68>)
 80001a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a8:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0x1111, 18, (RCC_PLL_MUL_FACTOR-2));
 80001aa:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <MRCC_voidInit+0x68>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	f023 4388 	bic.w	r3, r3, #1140850688	; 0x44000000
 80001b2:	f423 0388 	bic.w	r3, r3, #4456448	; 0x440000
 80001b6:	4a08      	ldr	r2, [pc, #32]	; (80001d8 <MRCC_voidInit+0x68>)
 80001b8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80001bc:	6053      	str	r3, [r2, #4]

#endif

	MRCC_voidEnableClockSource(RCC_SYSTEM_CLOCK_SOURCE, RCC_STATUS_ON);
 80001be:	2101      	movs	r1, #1
 80001c0:	2019      	movs	r0, #25
 80001c2:	f000 f865 	bl	8000290 <MRCC_voidEnableClockSource>

	MRCC_u8CheckClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80001c6:	2019      	movs	r0, #25
 80001c8:	f000 f808 	bl	80001dc <MRCC_u8CheckClockSource>

	MRCC_voidSetClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80001cc:	2019      	movs	r0, #25
 80001ce:	f000 f833 	bl	8000238 <MRCC_voidSetClockSource>

}
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000

080001dc <MRCC_u8CheckClockSource>:

u8 MRCC_u8CheckClockSource(RCC_CLOCK_SOURCE copy_u8CLK)
{
 80001dc:	b480      	push	{r7}
 80001de:	b087      	sub	sp, #28
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
	u32 max_wait_time = 50000;
 80001e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80001ea:	60fb      	str	r3, [r7, #12]
	u32 counter = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	617b      	str	r3, [r7, #20]
	u8 state = 1;
 80001f0:	2301      	movs	r3, #1
 80001f2:	74fb      	strb	r3, [r7, #19]

	if ((copy_u8CLK != RCC_HSI) && (copy_u8CLK != RCC_HSE)
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d00d      	beq.n	8000216 <MRCC_u8CheckClockSource+0x3a>
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b11      	cmp	r3, #17
 80001fe:	d00a      	beq.n	8000216 <MRCC_u8CheckClockSource+0x3a>
			&& (copy_u8CLK != RCC_PLL)) state = 0;
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	2b19      	cmp	r3, #25
 8000204:	d007      	beq.n	8000216 <MRCC_u8CheckClockSource+0x3a>
 8000206:	2300      	movs	r3, #0
 8000208:	74fb      	strb	r3, [r7, #19]
 800020a:	e00d      	b.n	8000228 <MRCC_u8CheckClockSource+0x4c>
	else
	{
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
		{
			counter++;
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	3301      	adds	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
			state = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	74fb      	strb	r3, [r7, #19]
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <MRCC_u8CheckClockSource+0x58>)
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	fa22 f303 	lsr.w	r3, r2, r3
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d0f1      	beq.n	800020c <MRCC_u8CheckClockSource+0x30>
			//if (counter == max_wait_time) break;
		}
	}
	return state;
 8000228:	7cfb      	ldrb	r3, [r7, #19]
}
 800022a:	4618      	mov	r0, r3
 800022c:	371c      	adds	r7, #28
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40021000 	.word	0x40021000

08000238 <MRCC_voidSetClockSource>:

void MRCC_voidSetClockSource(RCC_CLOCK_SOURCE copy_u8Source)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8Source)
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	2b11      	cmp	r3, #17
 8000246:	d00b      	beq.n	8000260 <MRCC_voidSetClockSource+0x28>
 8000248:	2b19      	cmp	r3, #25
 800024a:	d011      	beq.n	8000270 <MRCC_voidSetClockSource+0x38>
 800024c:	2b01      	cmp	r3, #1
 800024e:	d000      	beq.n	8000252 <MRCC_voidSetClockSource+0x1a>
			break;
		case RCC_PLL:
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
			break;
	}
}
 8000250:	e016      	b.n	8000280 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 0);
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MRCC_voidSetClockSource+0x54>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a0d      	ldr	r2, [pc, #52]	; (800028c <MRCC_voidSetClockSource+0x54>)
 8000258:	f023 0303 	bic.w	r3, r3, #3
 800025c:	6053      	str	r3, [r2, #4]
			break;
 800025e:	e00f      	b.n	8000280 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 1);
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <MRCC_voidSetClockSource+0x54>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	f023 0303 	bic.w	r3, r3, #3
 8000268:	4a08      	ldr	r2, [pc, #32]	; (800028c <MRCC_voidSetClockSource+0x54>)
 800026a:	3301      	adds	r3, #1
 800026c:	6053      	str	r3, [r2, #4]
			break;
 800026e:	e007      	b.n	8000280 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <MRCC_voidSetClockSource+0x54>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	f023 0303 	bic.w	r3, r3, #3
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <MRCC_voidSetClockSource+0x54>)
 800027a:	3302      	adds	r3, #2
 800027c:	6053      	str	r3, [r2, #4]
			break;
 800027e:	bf00      	nop
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <MRCC_voidEnableClockSource>:

void MRCC_voidEnableClockSource(RCC_CLOCK_SOURCE copy_u8ClockSource,
		RCC_STATES copy_u8state)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	460a      	mov	r2, r1
 800029a:	71fb      	strb	r3, [r7, #7]
 800029c:	4613      	mov	r3, r2
 800029e:	71bb      	strb	r3, [r7, #6]
	// the insert function offset value is determined with the bus variable
	// which is specified in the interface file
	INS_BIT(RCC->RCC_CR, (copy_u8ClockSource - 1), copy_u8state); // source_ON bit
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <MRCC_voidEnableClockSource+0x40>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	79fa      	ldrb	r2, [r7, #7]
 80002a6:	3a01      	subs	r2, #1
 80002a8:	2101      	movs	r1, #1
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	43d2      	mvns	r2, r2
 80002b0:	4013      	ands	r3, r2
 80002b2:	79b9      	ldrb	r1, [r7, #6]
 80002b4:	79fa      	ldrb	r2, [r7, #7]
 80002b6:	3a01      	subs	r2, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <MRCC_voidEnableClockSource+0x40>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40021000 	.word	0x40021000

080002d4 <MRCC_voidSetBusClocks>:

void MRCC_voidSetBusClocks(RCC_AHB_PRESCALER copy_AHB,
		RCC_APB_PRESCALER copy_APB1, RCC_APB_PRESCALER copy_APB2)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	460b      	mov	r3, r1
 80002e0:	71bb      	strb	r3, [r7, #6]
 80002e2:	4613      	mov	r3, r2
 80002e4:	717b      	strb	r3, [r7, #5]
	// AHB prescaler is different 4-bits wide

	INS_FIELD(RCC->RCC_CFGR, 0b1111, 4, copy_AHB);
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <MRCC_voidSetBusClocks+0x58>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002ee:	79fa      	ldrb	r2, [r7, #7]
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	4611      	mov	r1, r2
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <MRCC_voidSetBusClocks+0x58>)
 80002f6:	440b      	add	r3, r1
 80002f8:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 8, copy_APB1);
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MRCC_voidSetBusClocks+0x58>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	0212      	lsls	r2, r2, #8
 8000306:	4611      	mov	r1, r2
 8000308:	4a08      	ldr	r2, [pc, #32]	; (800032c <MRCC_voidSetBusClocks+0x58>)
 800030a:	440b      	add	r3, r1
 800030c:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 11, copy_APB2);
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <MRCC_voidSetBusClocks+0x58>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000316:	797a      	ldrb	r2, [r7, #5]
 8000318:	02d2      	lsls	r2, r2, #11
 800031a:	4611      	mov	r1, r2
 800031c:	4a03      	ldr	r2, [pc, #12]	; (800032c <MRCC_voidSetBusClocks+0x58>)
 800031e:	440b      	add	r3, r1
 8000320:	6053      	str	r3, [r2, #4]

}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000

08000330 <main>:
#include "../Inc/LIBRARY/standard_types.h"

#include "../Inc/MCAL/RCC/RCC_interface.h"

int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

	MRCC_voidInit();
 8000334:	f7ff ff1c 	bl	8000170 <MRCC_voidInit>

	while (1)
 8000338:	e7fe      	b.n	8000338 <main+0x8>
	...

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000340:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 f811 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ffdf 	bl	8000330 <main>

08000372 <LoopForever>:

LoopForever:
    b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000380:	080003f8 	.word	0x080003f8
  ldr r2, =_sbss
 8000384:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000388:	2000001c 	.word	0x2000001c

0800038c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC1_2_IRQHandler>
	...

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	2500      	movs	r5, #0
 8000394:	4e0c      	ldr	r6, [pc, #48]	; (80003c8 <__libc_init_array+0x38>)
 8000396:	4c0d      	ldr	r4, [pc, #52]	; (80003cc <__libc_init_array+0x3c>)
 8000398:	1ba4      	subs	r4, r4, r6
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	42a5      	cmp	r5, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	f000 f81a 	bl	80003d8 <_init>
 80003a4:	2500      	movs	r5, #0
 80003a6:	4e0a      	ldr	r6, [pc, #40]	; (80003d0 <__libc_init_array+0x40>)
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <__libc_init_array+0x44>)
 80003aa:	1ba4      	subs	r4, r4, r6
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	42a5      	cmp	r5, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003b8:	4798      	blx	r3
 80003ba:	3501      	adds	r5, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003c2:	4798      	blx	r3
 80003c4:	3501      	adds	r5, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f0 	.word	0x080003f0
 80003cc:	080003f0 	.word	0x080003f0
 80003d0:	080003f0 	.word	0x080003f0
 80003d4:	080003f4 	.word	0x080003f4

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
