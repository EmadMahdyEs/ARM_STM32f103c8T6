
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b68  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c98  08000ca0  00010ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c98  08000c98  00010ca0  2**0
                  CONTENTS
  4 .ARM          00000000  08000c98  08000c98  00010ca0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c98  08000ca0  00010ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c98  08000c98  00010c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c9c  08000c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa4  20000000  08000ca0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fa4  08000ca0  00011fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ca0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000118c  00000000  00000000  00010cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000056b  00000000  00000000  00011e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  000123c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a0  00000000  00000000  000125b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ffd  00000000  00000000  00012758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000008d0  00000000  00000000  00013755  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004bf8  00000000  00000000  00014025  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000690  00000000  00000000  00018c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c80 	.word	0x08000c80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c80 	.word	0x08000c80

08000170 <MDMA_voidConfigure>:
		DMA_PERIPHERAL_INC_STATUS_t copy_ePINC,
		DMA_MEMORY_INC_STATUS_t copy_eMINC,
		DMA_ELEMENT_SIZT_t copy_eMemoryElement,
		DMA_ELEMENT_SIZT_t copy_ePeripheralElement,
		DMA_PRIORITY_t copy_ePriority)
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	4603      	mov	r3, r0
 8000184:	71bb      	strb	r3, [r7, #6]
 8000186:	460b      	mov	r3, r1
 8000188:	717b      	strb	r3, [r7, #5]
 800018a:	4613      	mov	r3, r2
 800018c:	713b      	strb	r3, [r7, #4]
	// disable DMA Channel first
	MDMA_voidChannelStatus(copy_eChannel, DMA_DISABLE);
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f000 fa10 	bl	80005b8 <MDMA_voidChannelStatus>

	// set mode
	switch (copy_eMode)
 8000198:	79bb      	ldrb	r3, [r7, #6]
 800019a:	2b04      	cmp	r3, #4
 800019c:	f200 8141 	bhi.w	8000422 <MDMA_voidConfigure+0x2b2>
 80001a0:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <MDMA_voidConfigure+0x38>)
 80001a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a6:	bf00      	nop
 80001a8:	080001bd 	.word	0x080001bd
 80001ac:	08000237 	.word	0x08000237
 80001b0:	080002b1 	.word	0x080002b1
 80001b4:	0800032b 	.word	0x0800032b
 80001b8:	080003a9 	.word	0x080003a9
	{
		case DMA_MODE_MEMORY_TO_MEMORY:
			SET_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, MEM2MEM_BIT);
 80001bc:	4979      	ldr	r1, [pc, #484]	; (80003a4 <MDMA_voidConfigure+0x234>)
 80001be:	79fa      	ldrb	r2, [r7, #7]
 80001c0:	4613      	mov	r3, r2
 80001c2:	009b      	lsls	r3, r3, #2
 80001c4:	4413      	add	r3, r2
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	440b      	add	r3, r1
 80001ca:	3308      	adds	r3, #8
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4875      	ldr	r0, [pc, #468]	; (80003a4 <MDMA_voidConfigure+0x234>)
 80001d0:	79fa      	ldrb	r2, [r7, #7]
 80001d2:	f443 4180 	orr.w	r1, r3, #16384	; 0x4000
 80001d6:	4613      	mov	r3, r2
 80001d8:	009b      	lsls	r3, r3, #2
 80001da:	4413      	add	r3, r2
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	4403      	add	r3, r0
 80001e0:	3308      	adds	r3, #8
 80001e2:	6019      	str	r1, [r3, #0]
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, CIRC_BIT); // no circular mode
 80001e4:	496f      	ldr	r1, [pc, #444]	; (80003a4 <MDMA_voidConfigure+0x234>)
 80001e6:	79fa      	ldrb	r2, [r7, #7]
 80001e8:	4613      	mov	r3, r2
 80001ea:	009b      	lsls	r3, r3, #2
 80001ec:	4413      	add	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	440b      	add	r3, r1
 80001f2:	3308      	adds	r3, #8
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	486b      	ldr	r0, [pc, #428]	; (80003a4 <MDMA_voidConfigure+0x234>)
 80001f8:	79fa      	ldrb	r2, [r7, #7]
 80001fa:	f023 0120 	bic.w	r1, r3, #32
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	4403      	add	r3, r0
 8000208:	3308      	adds	r3, #8
 800020a:	6019      	str	r1, [r3, #0]
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, DIR_BIT); // peripheral to memory
 800020c:	4965      	ldr	r1, [pc, #404]	; (80003a4 <MDMA_voidConfigure+0x234>)
 800020e:	79fa      	ldrb	r2, [r7, #7]
 8000210:	4613      	mov	r3, r2
 8000212:	009b      	lsls	r3, r3, #2
 8000214:	4413      	add	r3, r2
 8000216:	009b      	lsls	r3, r3, #2
 8000218:	440b      	add	r3, r1
 800021a:	3308      	adds	r3, #8
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4861      	ldr	r0, [pc, #388]	; (80003a4 <MDMA_voidConfigure+0x234>)
 8000220:	79fa      	ldrb	r2, [r7, #7]
 8000222:	f023 0110 	bic.w	r1, r3, #16
 8000226:	4613      	mov	r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	4413      	add	r3, r2
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	4403      	add	r3, r0
 8000230:	3308      	adds	r3, #8
 8000232:	6019      	str	r1, [r3, #0]
			break;
 8000234:	e0f5      	b.n	8000422 <MDMA_voidConfigure+0x2b2>

		case DMA_MODE_PERIPHERAL_TO_MEMORY:
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, MEM2MEM_BIT);
 8000236:	495b      	ldr	r1, [pc, #364]	; (80003a4 <MDMA_voidConfigure+0x234>)
 8000238:	79fa      	ldrb	r2, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	4413      	add	r3, r2
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	440b      	add	r3, r1
 8000244:	3308      	adds	r3, #8
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4856      	ldr	r0, [pc, #344]	; (80003a4 <MDMA_voidConfigure+0x234>)
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8000250:	4613      	mov	r3, r2
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4413      	add	r3, r2
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	4403      	add	r3, r0
 800025a:	3308      	adds	r3, #8
 800025c:	6019      	str	r1, [r3, #0]
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, CIRC_BIT); // no circular mode
 800025e:	4951      	ldr	r1, [pc, #324]	; (80003a4 <MDMA_voidConfigure+0x234>)
 8000260:	79fa      	ldrb	r2, [r7, #7]
 8000262:	4613      	mov	r3, r2
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4413      	add	r3, r2
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	440b      	add	r3, r1
 800026c:	3308      	adds	r3, #8
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	484c      	ldr	r0, [pc, #304]	; (80003a4 <MDMA_voidConfigure+0x234>)
 8000272:	79fa      	ldrb	r2, [r7, #7]
 8000274:	f023 0120 	bic.w	r1, r3, #32
 8000278:	4613      	mov	r3, r2
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	4413      	add	r3, r2
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	4403      	add	r3, r0
 8000282:	3308      	adds	r3, #8
 8000284:	6019      	str	r1, [r3, #0]
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, DIR_BIT); // peripheral to memory
 8000286:	4947      	ldr	r1, [pc, #284]	; (80003a4 <MDMA_voidConfigure+0x234>)
 8000288:	79fa      	ldrb	r2, [r7, #7]
 800028a:	4613      	mov	r3, r2
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	4413      	add	r3, r2
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	440b      	add	r3, r1
 8000294:	3308      	adds	r3, #8
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4842      	ldr	r0, [pc, #264]	; (80003a4 <MDMA_voidConfigure+0x234>)
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	f023 0110 	bic.w	r1, r3, #16
 80002a0:	4613      	mov	r3, r2
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	4413      	add	r3, r2
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4403      	add	r3, r0
 80002aa:	3308      	adds	r3, #8
 80002ac:	6019      	str	r1, [r3, #0]
			break;
 80002ae:	e0b8      	b.n	8000422 <MDMA_voidConfigure+0x2b2>

		case DMA_MOODE_MEMORY_TO_PERIPHERAL:
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, MEM2MEM_BIT);
 80002b0:	493c      	ldr	r1, [pc, #240]	; (80003a4 <MDMA_voidConfigure+0x234>)
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	4413      	add	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	440b      	add	r3, r1
 80002be:	3308      	adds	r3, #8
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4838      	ldr	r0, [pc, #224]	; (80003a4 <MDMA_voidConfigure+0x234>)
 80002c4:	79fa      	ldrb	r2, [r7, #7]
 80002c6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80002ca:	4613      	mov	r3, r2
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4413      	add	r3, r2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	4403      	add	r3, r0
 80002d4:	3308      	adds	r3, #8
 80002d6:	6019      	str	r1, [r3, #0]
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, CIRC_BIT); // no circular mode
 80002d8:	4932      	ldr	r1, [pc, #200]	; (80003a4 <MDMA_voidConfigure+0x234>)
 80002da:	79fa      	ldrb	r2, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	3308      	adds	r3, #8
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	482e      	ldr	r0, [pc, #184]	; (80003a4 <MDMA_voidConfigure+0x234>)
 80002ec:	79fa      	ldrb	r2, [r7, #7]
 80002ee:	f023 0120 	bic.w	r1, r3, #32
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4403      	add	r3, r0
 80002fc:	3308      	adds	r3, #8
 80002fe:	6019      	str	r1, [r3, #0]
			SET_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, DIR_BIT); // memory to peripheral
 8000300:	4928      	ldr	r1, [pc, #160]	; (80003a4 <MDMA_voidConfigure+0x234>)
 8000302:	79fa      	ldrb	r2, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	440b      	add	r3, r1
 800030e:	3308      	adds	r3, #8
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4824      	ldr	r0, [pc, #144]	; (80003a4 <MDMA_voidConfigure+0x234>)
 8000314:	79fa      	ldrb	r2, [r7, #7]
 8000316:	f043 0110 	orr.w	r1, r3, #16
 800031a:	4613      	mov	r3, r2
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	4403      	add	r3, r0
 8000324:	3308      	adds	r3, #8
 8000326:	6019      	str	r1, [r3, #0]
			break;
 8000328:	e07b      	b.n	8000422 <MDMA_voidConfigure+0x2b2>

		case DMA_MODE_PERIPHERAL_TO_MEMORY_CIRCULAR:
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, MEM2MEM_BIT);
 800032a:	491e      	ldr	r1, [pc, #120]	; (80003a4 <MDMA_voidConfigure+0x234>)
 800032c:	79fa      	ldrb	r2, [r7, #7]
 800032e:	4613      	mov	r3, r2
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	4413      	add	r3, r2
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	440b      	add	r3, r1
 8000338:	3308      	adds	r3, #8
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4819      	ldr	r0, [pc, #100]	; (80003a4 <MDMA_voidConfigure+0x234>)
 800033e:	79fa      	ldrb	r2, [r7, #7]
 8000340:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	4403      	add	r3, r0
 800034e:	3308      	adds	r3, #8
 8000350:	6019      	str	r1, [r3, #0]
			SET_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, CIRC_BIT); // no circular mode
 8000352:	4914      	ldr	r1, [pc, #80]	; (80003a4 <MDMA_voidConfigure+0x234>)
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	4613      	mov	r3, r2
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	4413      	add	r3, r2
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	440b      	add	r3, r1
 8000360:	3308      	adds	r3, #8
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	480f      	ldr	r0, [pc, #60]	; (80003a4 <MDMA_voidConfigure+0x234>)
 8000366:	79fa      	ldrb	r2, [r7, #7]
 8000368:	f043 0120 	orr.w	r1, r3, #32
 800036c:	4613      	mov	r3, r2
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4413      	add	r3, r2
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	4403      	add	r3, r0
 8000376:	3308      	adds	r3, #8
 8000378:	6019      	str	r1, [r3, #0]
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, DIR_BIT); // peripheral to memory
 800037a:	490a      	ldr	r1, [pc, #40]	; (80003a4 <MDMA_voidConfigure+0x234>)
 800037c:	79fa      	ldrb	r2, [r7, #7]
 800037e:	4613      	mov	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4413      	add	r3, r2
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	440b      	add	r3, r1
 8000388:	3308      	adds	r3, #8
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MDMA_voidConfigure+0x234>)
 800038e:	79fa      	ldrb	r2, [r7, #7]
 8000390:	f023 0110 	bic.w	r1, r3, #16
 8000394:	4613      	mov	r3, r2
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	4413      	add	r3, r2
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4403      	add	r3, r0
 800039e:	3308      	adds	r3, #8
 80003a0:	6019      	str	r1, [r3, #0]
			break;
 80003a2:	e03e      	b.n	8000422 <MDMA_voidConfigure+0x2b2>
 80003a4:	40020000 	.word	0x40020000

		case DMA_MOODE_MEMORY_TO_PERIPHERAL_CIRCULAR:
			CLR_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, MEM2MEM_BIT);
 80003a8:	495c      	ldr	r1, [pc, #368]	; (800051c <MDMA_voidConfigure+0x3ac>)
 80003aa:	79fa      	ldrb	r2, [r7, #7]
 80003ac:	4613      	mov	r3, r2
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	4413      	add	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	440b      	add	r3, r1
 80003b6:	3308      	adds	r3, #8
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4858      	ldr	r0, [pc, #352]	; (800051c <MDMA_voidConfigure+0x3ac>)
 80003bc:	79fa      	ldrb	r2, [r7, #7]
 80003be:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80003c2:	4613      	mov	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4403      	add	r3, r0
 80003cc:	3308      	adds	r3, #8
 80003ce:	6019      	str	r1, [r3, #0]
			SET_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, CIRC_BIT); // no circular mode
 80003d0:	4952      	ldr	r1, [pc, #328]	; (800051c <MDMA_voidConfigure+0x3ac>)
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4413      	add	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	440b      	add	r3, r1
 80003de:	3308      	adds	r3, #8
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	484e      	ldr	r0, [pc, #312]	; (800051c <MDMA_voidConfigure+0x3ac>)
 80003e4:	79fa      	ldrb	r2, [r7, #7]
 80003e6:	f043 0120 	orr.w	r1, r3, #32
 80003ea:	4613      	mov	r3, r2
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4413      	add	r3, r2
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	4403      	add	r3, r0
 80003f4:	3308      	adds	r3, #8
 80003f6:	6019      	str	r1, [r3, #0]
			SET_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, DIR_BIT); // memory to peripheral
 80003f8:	4948      	ldr	r1, [pc, #288]	; (800051c <MDMA_voidConfigure+0x3ac>)
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	4613      	mov	r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	4413      	add	r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	440b      	add	r3, r1
 8000406:	3308      	adds	r3, #8
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4844      	ldr	r0, [pc, #272]	; (800051c <MDMA_voidConfigure+0x3ac>)
 800040c:	79fa      	ldrb	r2, [r7, #7]
 800040e:	f043 0110 	orr.w	r1, r3, #16
 8000412:	4613      	mov	r3, r2
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	4413      	add	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4403      	add	r3, r0
 800041c:	3308      	adds	r3, #8
 800041e:	6019      	str	r1, [r3, #0]
			break;
 8000420:	bf00      	nop
	} //switch

	// peripheral increment
	INS_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, PINC_BIT, copy_ePINC);
 8000422:	493e      	ldr	r1, [pc, #248]	; (800051c <MDMA_voidConfigure+0x3ac>)
 8000424:	79fa      	ldrb	r2, [r7, #7]
 8000426:	4613      	mov	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	440b      	add	r3, r1
 8000430:	3308      	adds	r3, #8
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000438:	797a      	ldrb	r2, [r7, #5]
 800043a:	0192      	lsls	r2, r2, #6
 800043c:	4611      	mov	r1, r2
 800043e:	4837      	ldr	r0, [pc, #220]	; (800051c <MDMA_voidConfigure+0x3ac>)
 8000440:	79fa      	ldrb	r2, [r7, #7]
 8000442:	4319      	orrs	r1, r3
 8000444:	4613      	mov	r3, r2
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	4413      	add	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4403      	add	r3, r0
 800044e:	3308      	adds	r3, #8
 8000450:	6019      	str	r1, [r3, #0]

	// memory increment
	INS_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, MINC_BIT, copy_eMINC);
 8000452:	4932      	ldr	r1, [pc, #200]	; (800051c <MDMA_voidConfigure+0x3ac>)
 8000454:	79fa      	ldrb	r2, [r7, #7]
 8000456:	4613      	mov	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4413      	add	r3, r2
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	440b      	add	r3, r1
 8000460:	3308      	adds	r3, #8
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000468:	793a      	ldrb	r2, [r7, #4]
 800046a:	01d2      	lsls	r2, r2, #7
 800046c:	4611      	mov	r1, r2
 800046e:	482b      	ldr	r0, [pc, #172]	; (800051c <MDMA_voidConfigure+0x3ac>)
 8000470:	79fa      	ldrb	r2, [r7, #7]
 8000472:	4319      	orrs	r1, r3
 8000474:	4613      	mov	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	4413      	add	r3, r2
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	4403      	add	r3, r0
 800047e:	3308      	adds	r3, #8
 8000480:	6019      	str	r1, [r3, #0]

	// peripheral element size
	INS_FIELD(DMA1->CHANNEL[copy_eChannel].DMA_CCR, 0b11, 8,
 8000482:	4926      	ldr	r1, [pc, #152]	; (800051c <MDMA_voidConfigure+0x3ac>)
 8000484:	79fa      	ldrb	r2, [r7, #7]
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	440b      	add	r3, r1
 8000490:	3308      	adds	r3, #8
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000498:	7f3a      	ldrb	r2, [r7, #28]
 800049a:	0212      	lsls	r2, r2, #8
 800049c:	4611      	mov	r1, r2
 800049e:	481f      	ldr	r0, [pc, #124]	; (800051c <MDMA_voidConfigure+0x3ac>)
 80004a0:	79fa      	ldrb	r2, [r7, #7]
 80004a2:	4419      	add	r1, r3
 80004a4:	4613      	mov	r3, r2
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	4413      	add	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	4403      	add	r3, r0
 80004ae:	3308      	adds	r3, #8
 80004b0:	6019      	str	r1, [r3, #0]
			copy_ePeripheralElement);

	// memory element size
	INS_FIELD(DMA1->CHANNEL[copy_eChannel].DMA_CCR, 0b11, 10,
 80004b2:	491a      	ldr	r1, [pc, #104]	; (800051c <MDMA_voidConfigure+0x3ac>)
 80004b4:	79fa      	ldrb	r2, [r7, #7]
 80004b6:	4613      	mov	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	440b      	add	r3, r1
 80004c0:	3308      	adds	r3, #8
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80004c8:	7e3a      	ldrb	r2, [r7, #24]
 80004ca:	0292      	lsls	r2, r2, #10
 80004cc:	4611      	mov	r1, r2
 80004ce:	4813      	ldr	r0, [pc, #76]	; (800051c <MDMA_voidConfigure+0x3ac>)
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	4419      	add	r1, r3
 80004d4:	4613      	mov	r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4403      	add	r3, r0
 80004de:	3308      	adds	r3, #8
 80004e0:	6019      	str	r1, [r3, #0]
			copy_eMemoryElement);

	// priority
	INS_FIELD(DMA1->CHANNEL[copy_eChannel].DMA_CCR, 0b11, 12, copy_ePriority);
 80004e2:	490e      	ldr	r1, [pc, #56]	; (800051c <MDMA_voidConfigure+0x3ac>)
 80004e4:	79fa      	ldrb	r2, [r7, #7]
 80004e6:	4613      	mov	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4413      	add	r3, r2
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	440b      	add	r3, r1
 80004f0:	3308      	adds	r3, #8
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80004fc:	0312      	lsls	r2, r2, #12
 80004fe:	4611      	mov	r1, r2
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <MDMA_voidConfigure+0x3ac>)
 8000502:	79fa      	ldrb	r2, [r7, #7]
 8000504:	4419      	add	r1, r3
 8000506:	4613      	mov	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	4403      	add	r3, r0
 8000510:	3308      	adds	r3, #8
 8000512:	6019      	str	r1, [r3, #0]

}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bd90      	pop	{r4, r7, pc}
 800051c:	40020000 	.word	0x40020000

08000520 <MDMA_voidSetAddress>:

void MDMA_voidSetAddress(DMA_CHANNELS_t copy_eChannel, u32 *Peripheral_Address,
		u32 *Memory_Address, u16 Block_size)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60b9      	str	r1, [r7, #8]
 8000528:	607a      	str	r2, [r7, #4]
 800052a:	461a      	mov	r2, r3
 800052c:	4603      	mov	r3, r0
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	4613      	mov	r3, r2
 8000532:	81bb      	strh	r3, [r7, #12]
	DMA1->CHANNEL[copy_eChannel].DMA_CPAR = (u32) Peripheral_Address;
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <MDMA_voidSetAddress+0x5c>)
 8000536:	7bfa      	ldrb	r2, [r7, #15]
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	4613      	mov	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4403      	add	r3, r0
 8000544:	3310      	adds	r3, #16
 8000546:	6019      	str	r1, [r3, #0]
	DMA1->CHANNEL[copy_eChannel].DMA_CMAR = (u32) Memory_Address;
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <MDMA_voidSetAddress+0x5c>)
 800054a:	7bfa      	ldrb	r2, [r7, #15]
 800054c:	6879      	ldr	r1, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4403      	add	r3, r0
 8000558:	3314      	adds	r3, #20
 800055a:	6019      	str	r1, [r3, #0]
	DMA1->CHANNEL[copy_eChannel].DMA_CNDTR = Block_size;
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <MDMA_voidSetAddress+0x5c>)
 800055e:	7bfa      	ldrb	r2, [r7, #15]
 8000560:	89b9      	ldrh	r1, [r7, #12]
 8000562:	4613      	mov	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4413      	add	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4403      	add	r3, r0
 800056c:	330c      	adds	r3, #12
 800056e:	6019      	str	r1, [r3, #0]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40020000 	.word	0x40020000

08000580 <MDMA_voidClearFlag>:
	u8 local = GET_BIT(DMA1 ->DMA_ISR, (copy_eChannel * 4 + copy_eFlag));
	return local;
}

void MDMA_voidClearFlag(DMA_CHANNELS_t copy_eChannel, DMA_FLAGS_t copy_eFlag)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	SET_BIT(DMA1 ->DMA_IFCR, (copy_eChannel * 4 + copy_eFlag));
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <MDMA_voidClearFlag+0x34>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	79fa      	ldrb	r2, [r7, #7]
 8000596:	0091      	lsls	r1, r2, #2
 8000598:	79ba      	ldrb	r2, [r7, #6]
 800059a:	440a      	add	r2, r1
 800059c:	2101      	movs	r1, #1
 800059e:	fa01 f202 	lsl.w	r2, r1, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <MDMA_voidClearFlag+0x34>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6053      	str	r3, [r2, #4]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40020000 	.word	0x40020000

080005b8 <MDMA_voidChannelStatus>:

void MDMA_voidChannelStatus(DMA_CHANNELS_t copy_eChannel,
		DMA_STATUS_t copy_eStatus)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	460a      	mov	r2, r1
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	4613      	mov	r3, r2
 80005c6:	71bb      	strb	r3, [r7, #6]
	INS_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, 0, copy_eStatus);
 80005c8:	490d      	ldr	r1, [pc, #52]	; (8000600 <MDMA_voidChannelStatus+0x48>)
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	3308      	adds	r3, #8
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f023 0101 	bic.w	r1, r3, #1
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <MDMA_voidChannelStatus+0x48>)
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	4319      	orrs	r1, r3
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4403      	add	r3, r0
 80005f0:	3308      	adds	r3, #8
 80005f2:	6019      	str	r1, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40020000 	.word	0x40020000

08000604 <MDMA_voidInterruptStatus>:

void MDMA_voidInterruptStatus(DMA_CHANNELS_t copy_eChannel,
		DMA_EVENT_t copy_eEvent, DMA_STATUS_t copy_eStatus)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	460b      	mov	r3, r1
 8000610:	71bb      	strb	r3, [r7, #6]
 8000612:	4613      	mov	r3, r2
 8000614:	717b      	strb	r3, [r7, #5]
	INS_BIT(DMA1->CHANNEL[copy_eChannel].DMA_CCR, copy_eEvent, copy_eStatus);
 8000616:	4911      	ldr	r1, [pc, #68]	; (800065c <MDMA_voidInterruptStatus+0x58>)
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	4613      	mov	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	3308      	adds	r3, #8
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	79ba      	ldrb	r2, [r7, #6]
 800062a:	2101      	movs	r1, #1
 800062c:	fa01 f202 	lsl.w	r2, r1, r2
 8000630:	43d2      	mvns	r2, r2
 8000632:	4013      	ands	r3, r2
 8000634:	7979      	ldrb	r1, [r7, #5]
 8000636:	79ba      	ldrb	r2, [r7, #6]
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <MDMA_voidInterruptStatus+0x58>)
 8000640:	79fa      	ldrb	r2, [r7, #7]
 8000642:	4319      	orrs	r1, r3
 8000644:	4613      	mov	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4403      	add	r3, r0
 800064e:	3308      	adds	r3, #8
 8000650:	6019      	str	r1, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40020000 	.word	0x40020000

08000660 <MDMA_voidSetCallBack>:

void MDMA_voidSetCallBack(DMA_CHANNELS_t copy_eChannel, void (*ptr)(void))
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
	IRQ_ARRAY[copy_eChannel] = ptr;
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4904      	ldr	r1, [pc, #16]	; (8000680 <MDMA_voidSetCallBack+0x20>)
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	2000001c 	.word	0x2000001c

08000684 <DMA1_Channel1_IRQHandler>:

/////////////////////////////////////////IRQs/////////////////////////////////////////

void DMA1_Channel1_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	if (IRQ_ARRAY[0] != NULL) IRQ_ARRAY[0]();
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <DMA1_Channel1_IRQHandler+0x18>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <DMA1_Channel1_IRQHandler+0x12>
 8000690:	4b02      	ldr	r3, [pc, #8]	; (800069c <DMA1_Channel1_IRQHandler+0x18>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4798      	blx	r3

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000001c 	.word	0x2000001c

080006a0 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	if (IRQ_ARRAY[1] != NULL) IRQ_ARRAY[1]();
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <DMA1_Channel2_IRQHandler+0x18>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <DMA1_Channel2_IRQHandler+0x12>
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <DMA1_Channel2_IRQHandler+0x18>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4798      	blx	r3

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000001c 	.word	0x2000001c

080006bc <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	if (IRQ_ARRAY[2] != NULL) IRQ_ARRAY[2]();
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <DMA1_Channel3_IRQHandler+0x18>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <DMA1_Channel3_IRQHandler+0x12>
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <DMA1_Channel3_IRQHandler+0x18>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	4798      	blx	r3

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000001c 	.word	0x2000001c

080006d8 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if (IRQ_ARRAY[3] != NULL) IRQ_ARRAY[3]();
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <DMA1_Channel4_IRQHandler+0x18>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <DMA1_Channel4_IRQHandler+0x12>
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <DMA1_Channel4_IRQHandler+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	4798      	blx	r3

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000001c 	.word	0x2000001c

080006f4 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	if (IRQ_ARRAY[4] != NULL) IRQ_ARRAY[4]();
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <DMA1_Channel5_IRQHandler+0x18>)
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <DMA1_Channel5_IRQHandler+0x12>
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <DMA1_Channel5_IRQHandler+0x18>)
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	4798      	blx	r3

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000001c 	.word	0x2000001c

08000710 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	if (IRQ_ARRAY[5] != NULL) IRQ_ARRAY[5]();
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <DMA1_Channel6_IRQHandler+0x18>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <DMA1_Channel6_IRQHandler+0x12>
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <DMA1_Channel6_IRQHandler+0x18>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	4798      	blx	r3

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000001c 	.word	0x2000001c

0800072c <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if (IRQ_ARRAY[6] != NULL) IRQ_ARRAY[6]();
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <DMA1_Channel7_IRQHandler+0x18>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <DMA1_Channel7_IRQHandler+0x12>
 8000738:	4b02      	ldr	r3, [pc, #8]	; (8000744 <DMA1_Channel7_IRQHandler+0x18>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4798      	blx	r3

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000001c 	.word	0x2000001c

08000748 <MNVIC_voidEnableInterrupt>:



/* to enable the interrupt */
void MNVIC_voidEnableInterrupt(u8 copy_ISRNumber)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_ISRNumber / 32] = 1 << (copy_ISRNumber % 32);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f003 031f 	and.w	r3, r3, #31
 8000758:	2201      	movs	r2, #1
 800075a:	fa02 f103 	lsl.w	r1, r2, r3
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <MNVIC_voidEnableInterrupt+0x2c>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100

08000778 <MRCC_voidInit>:
u32 RCC_AHB_Frequency;
u32 RCC_APB1_Frequency;
u32 RCC_APB2_Frequency;

void MRCC_voidInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	/* assign the system clock global variable*/
	RCC_F_CPU = RCC_SYSTEM_CLOCK;
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MRCC_voidInit+0x48>)
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <MRCC_voidInit+0x4c>)
 8000780:	601a      	str	r2, [r3, #0]

	/* assign the AHB frequency global variable*/
#if RCC_AHB_BUS_PRESCALER <=10
	RCC_AHB_Frequency = RCC_F_CPU >> (RCC_AHB_BUS_PRESCALER - 7);
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MRCC_voidInit+0x48>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <MRCC_voidInit+0x50>)
 8000788:	6013      	str	r3, [r2, #0]
#else
	RCC_AHB_Frequency = RCC_F_CPU>>(RCC_AHB_BUS_PRESCALER-7+1);
#endif

	/* assign the APB1 & APB2 frequency global variable */
	RCC_APB1_Frequency = RCC_F_CPU >> (RCC_APB1_BUS_PRESCALER - 3);
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MRCC_voidInit+0x48>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <MRCC_voidInit+0x54>)
 8000792:	6013      	str	r3, [r2, #0]
	RCC_APB2_Frequency = RCC_F_CPU >> (RCC_APB2_BUS_PRESCALER - 3);
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MRCC_voidInit+0x48>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <MRCC_voidInit+0x58>)
 800079c:	6013      	str	r3, [r2, #0]

	MRCC_voidSetBusClocks(RCC_AHB_BUS_PRESCALER, RCC_APB1_BUS_PRESCALER,
 800079e:	2204      	movs	r2, #4
 80007a0:	2104      	movs	r1, #4
 80007a2:	2007      	movs	r0, #7
 80007a4:	f000 f898 	bl	80008d8 <MRCC_voidSetBusClocks>
	SET_BIT(RCC->RCC_CFGR, 16); //PLLSRC
	INS_FIELD(RCC->RCC_CFGR, 0x1111, 18, (RCC_PLL_MUL_FACTOR-2));

#endif

	MRCC_voidEnableClockSource(RCC_SYSTEM_CLOCK_SOURCE, RCC_STATUS_ON);
 80007a8:	2101      	movs	r1, #1
 80007aa:	2011      	movs	r0, #17
 80007ac:	f000 f872 	bl	8000894 <MRCC_voidEnableClockSource>

	MRCC_u8CheckClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80007b0:	2011      	movs	r0, #17
 80007b2:	f000 f80f 	bl	80007d4 <MRCC_u8CheckClockSource>

	MRCC_voidSetClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80007b6:	2011      	movs	r0, #17
 80007b8:	f000 f840 	bl	800083c <MRCC_voidSetClockSource>

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000040 	.word	0x20000040
 80007c4:	007a1200 	.word	0x007a1200
 80007c8:	20000048 	.word	0x20000048
 80007cc:	20000044 	.word	0x20000044
 80007d0:	2000004c 	.word	0x2000004c

080007d4 <MRCC_u8CheckClockSource>:

u8 MRCC_u8CheckClockSource(RCC_CLOCK_SOURCE copy_u8CLK)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	u32 max_wait_time = 50000;
 80007de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80007e2:	60fb      	str	r3, [r7, #12]
	u32 counter = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
	u8 state = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	74fb      	strb	r3, [r7, #19]

	if ((copy_u8CLK != RCC_HSI) && (copy_u8CLK != RCC_HSE)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d011      	beq.n	8000816 <MRCC_u8CheckClockSource+0x42>
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b11      	cmp	r3, #17
 80007f6:	d00e      	beq.n	8000816 <MRCC_u8CheckClockSource+0x42>
			&& (copy_u8CLK != RCC_PLL)) state = 0;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b19      	cmp	r3, #25
 80007fc:	d00b      	beq.n	8000816 <MRCC_u8CheckClockSource+0x42>
 80007fe:	2300      	movs	r3, #0
 8000800:	74fb      	strb	r3, [r7, #19]
 8000802:	e013      	b.n	800082c <MRCC_u8CheckClockSource+0x58>
	else
	{
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
		{
			counter++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
			state = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	74fb      	strb	r3, [r7, #19]
			if (counter == max_wait_time) break;
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	429a      	cmp	r2, r3
 8000814:	d009      	beq.n	800082a <MRCC_u8CheckClockSource+0x56>
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MRCC_u8CheckClockSource+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	fa22 f303 	lsr.w	r3, r2, r3
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0ed      	beq.n	8000804 <MRCC_u8CheckClockSource+0x30>
 8000828:	e000      	b.n	800082c <MRCC_u8CheckClockSource+0x58>
			if (counter == max_wait_time) break;
 800082a:	bf00      	nop
		}
	}
	return state;
 800082c:	7cfb      	ldrb	r3, [r7, #19]
}
 800082e:	4618      	mov	r0, r3
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	40021000 	.word	0x40021000

0800083c <MRCC_voidSetClockSource>:

void MRCC_voidSetClockSource(RCC_CLOCK_SOURCE copy_u8Source)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8Source)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b11      	cmp	r3, #17
 800084a:	d00b      	beq.n	8000864 <MRCC_voidSetClockSource+0x28>
 800084c:	2b19      	cmp	r3, #25
 800084e:	d011      	beq.n	8000874 <MRCC_voidSetClockSource+0x38>
 8000850:	2b01      	cmp	r3, #1
 8000852:	d000      	beq.n	8000856 <MRCC_voidSetClockSource+0x1a>
			break;
		case RCC_PLL:
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
			break;
	}
}
 8000854:	e016      	b.n	8000884 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 0);
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MRCC_voidSetClockSource+0x54>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <MRCC_voidSetClockSource+0x54>)
 800085c:	f023 0303 	bic.w	r3, r3, #3
 8000860:	6053      	str	r3, [r2, #4]
			break;
 8000862:	e00f      	b.n	8000884 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 1);
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MRCC_voidSetClockSource+0x54>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f023 0303 	bic.w	r3, r3, #3
 800086c:	4a08      	ldr	r2, [pc, #32]	; (8000890 <MRCC_voidSetClockSource+0x54>)
 800086e:	3301      	adds	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
			break;
 8000872:	e007      	b.n	8000884 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MRCC_voidSetClockSource+0x54>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f023 0303 	bic.w	r3, r3, #3
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <MRCC_voidSetClockSource+0x54>)
 800087e:	3302      	adds	r3, #2
 8000880:	6053      	str	r3, [r2, #4]
			break;
 8000882:	bf00      	nop
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <MRCC_voidEnableClockSource>:

void MRCC_voidEnableClockSource(RCC_CLOCK_SOURCE copy_u8ClockSource,
		RCC_STATES copy_u8state)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	71bb      	strb	r3, [r7, #6]
	// the insert function offset value is determined with the bus variable
	// which is specified in the interface file
	INS_BIT(RCC->RCC_CR, (copy_u8ClockSource - 1), copy_u8state); // source_ON bit
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MRCC_voidEnableClockSource+0x40>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2101      	movs	r1, #1
 80008ae:	fa01 f202 	lsl.w	r2, r1, r2
 80008b2:	43d2      	mvns	r2, r2
 80008b4:	4013      	ands	r3, r2
 80008b6:	79b9      	ldrb	r1, [r7, #6]
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	3a01      	subs	r2, #1
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <MRCC_voidEnableClockSource+0x40>)
 80008c4:	430b      	orrs	r3, r1
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <MRCC_voidSetBusClocks>:

void MRCC_voidSetBusClocks(RCC_AHB_PRESCALER copy_AHB,
		RCC_APB_PRESCALER copy_APB1, RCC_APB_PRESCALER copy_APB2)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	460b      	mov	r3, r1
 80008e4:	71bb      	strb	r3, [r7, #6]
 80008e6:	4613      	mov	r3, r2
 80008e8:	717b      	strb	r3, [r7, #5]
	// AHB prescaler is different 4-bits wide

	INS_FIELD(RCC->RCC_CFGR, 0b1111, 4, copy_AHB);
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MRCC_voidSetBusClocks+0x58>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	4611      	mov	r1, r2
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <MRCC_voidSetBusClocks+0x58>)
 80008fa:	440b      	add	r3, r1
 80008fc:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 8, copy_APB1);
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MRCC_voidSetBusClocks+0x58>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000906:	79ba      	ldrb	r2, [r7, #6]
 8000908:	0212      	lsls	r2, r2, #8
 800090a:	4611      	mov	r1, r2
 800090c:	4a08      	ldr	r2, [pc, #32]	; (8000930 <MRCC_voidSetBusClocks+0x58>)
 800090e:	440b      	add	r3, r1
 8000910:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 11, copy_APB2);
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MRCC_voidSetBusClocks+0x58>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800091a:	797a      	ldrb	r2, [r7, #5]
 800091c:	02d2      	lsls	r2, r2, #11
 800091e:	4611      	mov	r1, r2
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <MRCC_voidSetBusClocks+0x58>)
 8000922:	440b      	add	r3, r1
 8000924:	6053      	str	r3, [r2, #4]

}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000

08000934 <MRCC_voidSetPeripheralClock>:

void MRCC_voidSetPeripheralClock(RCC_BUS copy_u8Bus, u8 copy_u8PeripheralNum,
		RCC_STATES copy_periph_status)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	460b      	mov	r3, r1
 8000940:	71bb      	strb	r3, [r7, #6]
 8000942:	4613      	mov	r3, r2
 8000944:	717b      	strb	r3, [r7, #5]
	// dis/enable the desired peripheral on the specified bus
	// the insert function ofset value is determened with the bus variable
	// which is specified in the interface file
	if (copy_u8Bus == RCC_AHB_BUS)
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b04      	cmp	r3, #4
 800094a:	d110      	bne.n	800096e <MRCC_voidSetPeripheralClock+0x3a>
	{
		INS_BIT(RCC->RCC_AHBENR, copy_u8PeripheralNum, copy_periph_status);
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MRCC_voidSetPeripheralClock+0x94>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	2101      	movs	r1, #1
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	43d2      	mvns	r2, r2
 800095a:	4013      	ands	r3, r2
 800095c:	7979      	ldrb	r1, [r7, #5]
 800095e:	79ba      	ldrb	r2, [r7, #6]
 8000960:	fa01 f202 	lsl.w	r2, r1, r2
 8000964:	4611      	mov	r1, r2
 8000966:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <MRCC_voidSetPeripheralClock+0x94>)
 8000968:	430b      	orrs	r3, r1
 800096a:	6153      	str	r3, [r2, #20]
	}
	else if (copy_u8Bus == RCC_APB2_BUS)
	{
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
	}
}
 800096c:	e026      	b.n	80009bc <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB1_BUS)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d110      	bne.n	8000996 <MRCC_voidSetPeripheralClock+0x62>
		INS_BIT(RCC->RCC_APB1ENR, copy_u8PeripheralNum, copy_periph_status);
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MRCC_voidSetPeripheralClock+0x94>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	79ba      	ldrb	r2, [r7, #6]
 800097a:	2101      	movs	r1, #1
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	43d2      	mvns	r2, r2
 8000982:	4013      	ands	r3, r2
 8000984:	7979      	ldrb	r1, [r7, #5]
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	fa01 f202 	lsl.w	r2, r1, r2
 800098c:	4611      	mov	r1, r2
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <MRCC_voidSetPeripheralClock+0x94>)
 8000990:	430b      	orrs	r3, r1
 8000992:	61d3      	str	r3, [r2, #28]
}
 8000994:	e012      	b.n	80009bc <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB2_BUS)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b0b      	cmp	r3, #11
 800099a:	d10f      	bne.n	80009bc <MRCC_voidSetPeripheralClock+0x88>
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MRCC_voidSetPeripheralClock+0x94>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	79ba      	ldrb	r2, [r7, #6]
 80009a2:	2101      	movs	r1, #1
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	43d2      	mvns	r2, r2
 80009aa:	4013      	ands	r3, r2
 80009ac:	7979      	ldrb	r1, [r7, #5]
 80009ae:	79ba      	ldrb	r2, [r7, #6]
 80009b0:	fa01 f202 	lsl.w	r2, r1, r2
 80009b4:	4611      	mov	r1, r2
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <MRCC_voidSetPeripheralClock+0x94>)
 80009b8:	430b      	orrs	r3, r1
 80009ba:	6193      	str	r3, [r2, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <MSYSTICK_voidInit>:

void (*SYSTICK_CALLBACK)(void) = NULL;
u8 SYSTICK_ISR_TYPE_PERIODIC = 0;

void MSYSTICK_voidInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	// assign the global variable SYSTICK_Frequency according to the used input source
#if SYSTICK_INPUT_SOURCE==SYSTICK_CLOCK_SOURCE_AHB
	SYSTICK_Frequency = RCC_F_CPU;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MSYSTICK_voidInit+0x34>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <MSYSTICK_voidInit+0x38>)
 80009d6:	6013      	str	r3, [r2, #0]
#elif SYSTICK_INPUT_SOURCE == SYSTICK_CLOCK_SOURCE_AHB_8
	SYSTICK_Frequency = RCC_F_CPU / 8;
#endif

	// decide if input source is HSE or HSE/8
	INS_BIT(SYSTICK->STK_CTRL, 2, SYSTICK_INPUT_SOURCE);
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MSYSTICK_voidInit+0x3c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <MSYSTICK_voidInit+0x3c>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6013      	str	r3, [r2, #0]
	// decide the interrupt state 
	INS_BIT(SYSTICK->STK_CTRL, 1, SYSTICK_INT_STATUS);
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MSYSTICK_voidInit+0x3c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <MSYSTICK_voidInit+0x3c>)
 80009ea:	f023 0302 	bic.w	r3, r3, #2
 80009ee:	6013      	str	r3, [r2, #0]

#if (SYSTICK_PRELOAD_VALUE)
	// assign an initial valuefor the systick
	SYSTICK->STK_LOAD = SYSTICK_PRELOAD_VALUE;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <MSYSTICK_voidInit+0x3c>)
 80009f2:	220f      	movs	r2, #15
 80009f4:	605a      	str	r2, [r3, #4]
#else
#error	SYSTICK_PRELOAD_VALUE in Configuration file must have a value
#endif
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000040 	.word	0x20000040
 8000a04:	20000050 	.word	0x20000050
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <MSYSTICK_voidSetIntervalSingle>:
	CLR_BIT(SYSTICK->STK_CTRL, 0);

}

void MSYSTICK_voidSetIntervalSingle(u32 Num_Ticks, void (*ptr)(void))
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	// disable systick
	CLR_BIT(SYSTICK->STK_CTRL, 0);
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	6013      	str	r3, [r2, #0]

	// disable Int
	CLR_BIT(SYSTICK->STK_CTRL, 1);
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a28:	f023 0302 	bic.w	r3, r3, #2
 8000a2c:	6013      	str	r3, [r2, #0]

	// load value then clear current value
	SYSTICK->STK_LOAD = Num_Ticks;
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6053      	str	r3, [r2, #4]
	SYSTICK->STK_VAL = 0;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]

	// set call_back
	SYSTICK_CALLBACK = ptr;
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <MSYSTICK_voidSetIntervalSingle+0x60>)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	6013      	str	r3, [r2, #0]

	// set flag to zero
	SYSTICK_ISR_TYPE_PERIODIC = 0;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MSYSTICK_voidSetIntervalSingle+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]

	// enable systick
	SET_BIT(SYSTICK->STK_CTRL, 0);
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6013      	str	r3, [r2, #0]

	// enable Int
	SET_BIT(SYSTICK->STK_CTRL, 1);
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <MSYSTICK_voidSetIntervalSingle+0x5c>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6013      	str	r3, [r2, #0]

}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	e000e010 	.word	0xe000e010
 8000a6c:	20000038 	.word	0x20000038
 8000a70:	2000003c 	.word	0x2000003c

08000a74 <SysTick_Handler>:
{
	return copy_timeMS * (SYSTICK_Frequency / 1000);
}

void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	if (SYSTICK_ISR_TYPE_PERIODIC == 0)
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <SysTick_Handler+0x3c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d111      	bne.n	8000aa4 <SysTick_Handler+0x30>
	{
		// disable systick
		CLR_BIT(SYSTICK->STK_CTRL, 0);
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <SysTick_Handler+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <SysTick_Handler+0x40>)
 8000a86:	f023 0301 	bic.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]

		// disable Int
		CLR_BIT(SYSTICK->STK_CTRL, 1);
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <SysTick_Handler+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <SysTick_Handler+0x40>)
 8000a92:	f023 0302 	bic.w	r3, r3, #2
 8000a96:	6013      	str	r3, [r2, #0]

		// load value then clear current value
		SYSTICK->STK_LOAD = 0;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SysTick_Handler+0x40>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
		SYSTICK->STK_VAL = 0;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SysTick_Handler+0x40>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
	}

	SYSTICK_CALLBACK();
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SysTick_Handler+0x44>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4798      	blx	r3

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000003c 	.word	0x2000003c
 8000ab4:	e000e010 	.word	0xe000e010
 8000ab8:	20000038 	.word	0x20000038

08000abc <MSYSTICK_u32GetElapsedTime>:
{
	return SYSTICK->STK_VAL;
}

u32 MSYSTICK_u32GetElapsedTime(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	return SYSTICK->STK_LOAD - SYSTICK->STK_VAL;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <MSYSTICK_u32GetElapsedTime+0x18>)
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <MSYSTICK_u32GetElapsedTime+0x18>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <FOO>:
u32 time;
u32 time_dma;
u32 tim_processor;

void FOO(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <ISR>:

void ISR(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	MDMA_voidClearFlag(DMA_CHANNEL_1, DMA_TRANSFER_COMPLETE_FLAG);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff fd48 	bl	8000580 <MDMA_voidClearFlag>
	time_dma = MSYSTICK_u32GetElapsedTime();
 8000af0:	f7ff ffe4 	bl	8000abc <MSYSTICK_u32GetElapsedTime>
 8000af4:	4602      	mov	r2, r0
 8000af6:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <ISR+0x20>)
 8000af8:	601a      	str	r2, [r3, #0]
	flag = 1;
 8000afa:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <ISR+0x24>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20001000 	.word	0x20001000
 8000b08:	20000054 	.word	0x20000054

08000b0c <main>:

int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af04      	add	r7, sp, #16
	// RCC
	MRCC_voidInit();
 8000b12:	f7ff fe31 	bl	8000778 <MRCC_voidInit>
	MRCC_voidSetPeripheralClock(RCC_DMA1, RCC_STATUS_ON);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f7ff ff0a 	bl	8000934 <MRCC_voidSetPeripheralClock>

	// NVIC
	MNVIC_voidEnableInterrupt(NVIC_DMA1_CH_1);
 8000b20:	200b      	movs	r0, #11
 8000b22:	f7ff fe11 	bl	8000748 <MNVIC_voidEnableInterrupt>

	// initiaize array
	for (u16 i; i < 1000; i++)
 8000b26:	e007      	b.n	8000b38 <main+0x2c>
	{
		array1[i] = i;
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	88fa      	ldrh	r2, [r7, #6]
 8000b2c:	4926      	ldr	r1, [pc, #152]	; (8000bc8 <main+0xbc>)
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (u16 i; i < 1000; i++)
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	3301      	adds	r3, #1
 8000b36:	80fb      	strh	r3, [r7, #6]
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b3e:	d3f3      	bcc.n	8000b28 <main+0x1c>
	 * 2- set address
	 * 3- enable interrupt event
	 * 4- set call back function
	 * 5- enable DMA
	 */
	MDMA_voidConfigure(DMA_CHANNEL_1, DMA_MODE_MEMORY_TO_MEMORY,
 8000b40:	2303      	movs	r3, #3
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2302      	movs	r3, #2
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	2302      	movs	r3, #2
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2100      	movs	r1, #0
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff fb0c 	bl	8000170 <MDMA_voidConfigure>
			DMA_PERIPHERAL_INC_ENABLE, DMA_MEMORY_INC_ENABLE,
			DMA_ELEMENT_SIZE_32, DMA_ELEMENT_SIZE_32, DMA_PRIORITY_VERY_HIGH);

	MDMA_voidSetAddress(DMA_CHANNEL_1, array1, array2, 1000);
 8000b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <main+0xc0>)
 8000b5e:	491a      	ldr	r1, [pc, #104]	; (8000bc8 <main+0xbc>)
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff fcdd 	bl	8000520 <MDMA_voidSetAddress>

	MDMA_voidInterruptStatus(DMA_CHANNEL_1, DMA_EVENT_TRANSFER_COMPLETE,
 8000b66:	2201      	movs	r2, #1
 8000b68:	2101      	movs	r1, #1
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff fd4a 	bl	8000604 <MDMA_voidInterruptStatus>
			DMA_ENABLE);
	MDMA_voidSetCallBack(DMA_CHANNEL_1, ISR);
 8000b70:	4917      	ldr	r1, [pc, #92]	; (8000bd0 <main+0xc4>)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff fd74 	bl	8000660 <MDMA_voidSetCallBack>

	//systick
	MSYSTICK_voidInit();
 8000b78:	f7ff ff28 	bl	80009cc <MSYSTICK_voidInit>
//	MSYSTICK_voidSetIntervalSingle(100000000, FOO);
//	MDMA_voidChannelStatus(DMA_CHANNEL_1, DMA_ENABLE);

//	while (flag == 0);
//
	MSYSTICK_voidSetIntervalSingle(100000000, FOO);
 8000b7c:	4915      	ldr	r1, [pc, #84]	; (8000bd4 <main+0xc8>)
 8000b7e:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <main+0xcc>)
 8000b80:	f7ff ff44 	bl	8000a0c <MSYSTICK_voidSetIntervalSingle>

	MDMA_voidChannelStatus(DMA_CHANNEL_1, DMA_ENABLE);
 8000b84:	2101      	movs	r1, #1
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fd16 	bl	80005b8 <MDMA_voidChannelStatus>
	for (u16 i; i < 1000; i++)
 8000b8c:	e00a      	b.n	8000ba4 <main+0x98>
	{
		array1[i] = array2[i];
 8000b8e:	88ba      	ldrh	r2, [r7, #4]
 8000b90:	88bb      	ldrh	r3, [r7, #4]
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <main+0xc0>)
 8000b94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b98:	490b      	ldr	r1, [pc, #44]	; (8000bc8 <main+0xbc>)
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (u16 i; i < 1000; i++)
 8000b9e:	88bb      	ldrh	r3, [r7, #4]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	80bb      	strh	r3, [r7, #4]
 8000ba4:	88bb      	ldrh	r3, [r7, #4]
 8000ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000baa:	d3f0      	bcc.n	8000b8e <main+0x82>
	}

	tim_processor = MSYSTICK_u32GetElapsedTime();
 8000bac:	f7ff ff86 	bl	8000abc <MSYSTICK_u32GetElapsedTime>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <main+0xd0>)
 8000bb4:	601a      	str	r2, [r3, #0]

	int x = time + 6; // just to stop the debugger after the previous command
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <main+0xd4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3306      	adds	r3, #6
 8000bbc:	603b      	str	r3, [r7, #0]
	x++;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	603b      	str	r3, [r7, #0]
	while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <main+0xb8>
 8000bc6:	bf00      	nop
 8000bc8:	20001004 	.word	0x20001004
 8000bcc:	20000058 	.word	0x20000058
 8000bd0:	08000ae5 	.word	0x08000ae5
 8000bd4:	08000ad9 	.word	0x08000ad9
 8000bd8:	05f5e100 	.word	0x05f5e100
 8000bdc:	20000ff8 	.word	0x20000ff8
 8000be0:	20000ffc 	.word	0x20000ffc

08000be4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000be8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <LoopForever+0xe>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	; (8000c30 <LoopForever+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c12:	f000 f811 	bl	8000c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c16:	f7ff ff79 	bl	8000b0c <main>

08000c1a <LoopForever>:

LoopForever:
    b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
  ldr   r0, =_estack
 8000c1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c28:	08000ca0 	.word	0x08000ca0
  ldr r2, =_sbss
 8000c2c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c30:	20001fa4 	.word	0x20001fa4

08000c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_2_IRQHandler>
	...

08000c38 <__libc_init_array>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	4e0c      	ldr	r6, [pc, #48]	; (8000c70 <__libc_init_array+0x38>)
 8000c3e:	4c0d      	ldr	r4, [pc, #52]	; (8000c74 <__libc_init_array+0x3c>)
 8000c40:	1ba4      	subs	r4, r4, r6
 8000c42:	10a4      	asrs	r4, r4, #2
 8000c44:	42a5      	cmp	r5, r4
 8000c46:	d109      	bne.n	8000c5c <__libc_init_array+0x24>
 8000c48:	f000 f81a 	bl	8000c80 <_init>
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	4e0a      	ldr	r6, [pc, #40]	; (8000c78 <__libc_init_array+0x40>)
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <__libc_init_array+0x44>)
 8000c52:	1ba4      	subs	r4, r4, r6
 8000c54:	10a4      	asrs	r4, r4, #2
 8000c56:	42a5      	cmp	r5, r4
 8000c58:	d105      	bne.n	8000c66 <__libc_init_array+0x2e>
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
 8000c5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c60:	4798      	blx	r3
 8000c62:	3501      	adds	r5, #1
 8000c64:	e7ee      	b.n	8000c44 <__libc_init_array+0xc>
 8000c66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c6a:	4798      	blx	r3
 8000c6c:	3501      	adds	r5, #1
 8000c6e:	e7f2      	b.n	8000c56 <__libc_init_array+0x1e>
 8000c70:	08000c98 	.word	0x08000c98
 8000c74:	08000c98 	.word	0x08000c98
 8000c78:	08000c98 	.word	0x08000c98
 8000c7c:	08000c9c 	.word	0x08000c9c

08000c80 <_init>:
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c82:	bf00      	nop
 8000c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c86:	bc08      	pop	{r3}
 8000c88:	469e      	mov	lr, r3
 8000c8a:	4770      	bx	lr

08000c8c <_fini>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	bf00      	nop
 8000c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c92:	bc08      	pop	{r3}
 8000c94:	469e      	mov	lr, r3
 8000c96:	4770      	bx	lr
