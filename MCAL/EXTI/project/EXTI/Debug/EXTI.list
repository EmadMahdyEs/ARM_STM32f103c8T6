
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000734  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000864  0800086c  0001086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000864  08000864  0001086c  2**0
                  CONTENTS
  4 .ARM          00000000  08000864  08000864  0001086c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000864  0800086c  0001086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000864  08000864  00010864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000868  08000868  00010868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  0800086c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800086c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001086c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001092  00000000  00000000  00010895  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000495  00000000  00000000  00011927  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  00011dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  00011f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000fcc  00000000  00000000  00012078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000007a0  00000000  00000000  00013044  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004901  00000000  00000000  000137e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000180e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e8  00000000  00000000  00018160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800084c 	.word	0x0800084c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800084c 	.word	0x0800084c

08000170 <MEXTI_voidSetInterruptMode>:
#include "../Inc/MCAL/EXTI/EXTI_private.h"
#include "../Inc/MCAL/EXTI/EXTI_configure.h"

void MEXTI_voidSetInterruptMode(EXTI_LINEx copy_eLineNum,
		EXTI_INTERRUPT_t copy_eINTType)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	switch (copy_eINTType)
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	2b01      	cmp	r3, #1
 8000184:	d004      	beq.n	8000190 <MEXTI_voidSetInterruptMode+0x20>
 8000186:	2b02      	cmp	r3, #2
 8000188:	d00e      	beq.n	80001a8 <MEXTI_voidSetInterruptMode+0x38>
 800018a:	2b00      	cmp	r3, #0
 800018c:	d006      	beq.n	800019c <MEXTI_voidSetInterruptMode+0x2c>
		case EXTI_CHANGE:
			EXTI->EXTI_FTSR = 1 << copy_eLineNum;
			EXTI->EXTI_RTSR = 1 << copy_eLineNum;
			break;
	}
}
 800018e:	e016      	b.n	80001be <MEXTI_voidSetInterruptMode+0x4e>
			EXTI->EXTI_FTSR = 1 << copy_eLineNum;
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	2201      	movs	r2, #1
 8000194:	409a      	lsls	r2, r3
 8000196:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <MEXTI_voidSetInterruptMode+0x58>)
 8000198:	60da      	str	r2, [r3, #12]
			break;
 800019a:	e010      	b.n	80001be <MEXTI_voidSetInterruptMode+0x4e>
			EXTI->EXTI_RTSR = 1 << copy_eLineNum;
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	2201      	movs	r2, #1
 80001a0:	409a      	lsls	r2, r3
 80001a2:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <MEXTI_voidSetInterruptMode+0x58>)
 80001a4:	609a      	str	r2, [r3, #8]
			break;
 80001a6:	e00a      	b.n	80001be <MEXTI_voidSetInterruptMode+0x4e>
			EXTI->EXTI_FTSR = 1 << copy_eLineNum;
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2201      	movs	r2, #1
 80001ac:	409a      	lsls	r2, r3
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <MEXTI_voidSetInterruptMode+0x58>)
 80001b0:	60da      	str	r2, [r3, #12]
			EXTI->EXTI_RTSR = 1 << copy_eLineNum;
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	2201      	movs	r2, #1
 80001b6:	409a      	lsls	r2, r3
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <MEXTI_voidSetInterruptMode+0x58>)
 80001ba:	609a      	str	r2, [r3, #8]
			break;
 80001bc:	bf00      	nop
}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40010400 	.word	0x40010400

080001cc <MEXTI_voidEXTILineStatus>:

void MEXTI_voidEXTILineStatus(EXTI_LINEx copy_eLineNum,
		EXTI_STATUS_t copy_estatus)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	460a      	mov	r2, r1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	4613      	mov	r3, r2
 80001da:	71bb      	strb	r3, [r7, #6]
	INS_BIT(EXTI->EXTI_IMR, copy_eLineNum, copy_estatus);
 80001dc:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <MEXTI_voidEXTILineStatus+0x3c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	79fa      	ldrb	r2, [r7, #7]
 80001e2:	2101      	movs	r1, #1
 80001e4:	fa01 f202 	lsl.w	r2, r1, r2
 80001e8:	43d2      	mvns	r2, r2
 80001ea:	4013      	ands	r3, r2
 80001ec:	79b9      	ldrb	r1, [r7, #6]
 80001ee:	79fa      	ldrb	r2, [r7, #7]
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	4611      	mov	r1, r2
 80001f6:	4a04      	ldr	r2, [pc, #16]	; (8000208 <MEXTI_voidEXTILineStatus+0x3c>)
 80001f8:	430b      	orrs	r3, r1
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40010400 	.word	0x40010400

0800020c <MEXTI_voidClearPending>:
{
	EXTI->EXTI_SWIER = 1 << copy_eLineNum;
}

void MEXTI_voidClearPending(EXTI_LINEx copy_eLineNum)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
	EXTI->EXTI_PR = 1 << copy_eLineNum;
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2201      	movs	r2, #1
 800021a:	409a      	lsls	r2, r3
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <MEXTI_voidClearPending+0x20>)
 800021e:	615a      	str	r2, [r3, #20]
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40010400 	.word	0x40010400

08000230 <MGPIO_voidSetPinDirection>:
	}
}

void MGPIO_voidSetPinDirection(GPIO_PORT copy_u8Port, u8 copy_u8Pin,
		GPIO_MODE copy_u8Mode, GPIO_CONFIGURATION copy_u8CNFG)
{
 8000230:	b490      	push	{r4, r7}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	4604      	mov	r4, r0
 8000238:	4608      	mov	r0, r1
 800023a:	4611      	mov	r1, r2
 800023c:	461a      	mov	r2, r3
 800023e:	4623      	mov	r3, r4
 8000240:	71fb      	strb	r3, [r7, #7]
 8000242:	4603      	mov	r3, r0
 8000244:	71bb      	strb	r3, [r7, #6]
 8000246:	460b      	mov	r3, r1
 8000248:	717b      	strb	r3, [r7, #5]
 800024a:	4613      	mov	r3, r2
 800024c:	713b      	strb	r3, [r7, #4]
	u8 field = (copy_u8CNFG << 2) + copy_u8Mode;
 800024e:	793b      	ldrb	r3, [r7, #4]
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	b2da      	uxtb	r2, r3
 8000254:	797b      	ldrb	r3, [r7, #5]
 8000256:	4413      	add	r3, r2
 8000258:	73fb      	strb	r3, [r7, #15]
	if (copy_u8Pin < 8)
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	2b07      	cmp	r3, #7
 800025e:	d841      	bhi.n	80002e4 <MGPIO_voidSetPinDirection+0xb4>
	{
		switch (copy_u8Port)
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d017      	beq.n	8000296 <MGPIO_voidSetPinDirection+0x66>
 8000266:	2b02      	cmp	r3, #2
 8000268:	d028      	beq.n	80002bc <MGPIO_voidSetPinDirection+0x8c>
 800026a:	2b00      	cmp	r3, #0
 800026c:	d000      	beq.n	8000270 <MGPIO_voidSetPinDirection+0x40>
						field);
				break;

		}
	}
}
 800026e:	e086      	b.n	800037e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOA->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 8000270:	4b45      	ldr	r3, [pc, #276]	; (8000388 <MGPIO_voidSetPinDirection+0x158>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	79ba      	ldrb	r2, [r7, #6]
 8000276:	0092      	lsls	r2, r2, #2
 8000278:	210f      	movs	r1, #15
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	43d2      	mvns	r2, r2
 8000280:	4013      	ands	r3, r2
 8000282:	7bf9      	ldrb	r1, [r7, #15]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	0092      	lsls	r2, r2, #2
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a3e      	ldr	r2, [pc, #248]	; (8000388 <MGPIO_voidSetPinDirection+0x158>)
 8000290:	440b      	add	r3, r1
 8000292:	6013      	str	r3, [r2, #0]
				break;
 8000294:	e073      	b.n	800037e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOB->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 8000296:	4b3d      	ldr	r3, [pc, #244]	; (800038c <MGPIO_voidSetPinDirection+0x15c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	210f      	movs	r1, #15
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4013      	ands	r3, r2
 80002a8:	7bf9      	ldrb	r1, [r7, #15]
 80002aa:	79ba      	ldrb	r2, [r7, #6]
 80002ac:	0092      	lsls	r2, r2, #2
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a35      	ldr	r2, [pc, #212]	; (800038c <MGPIO_voidSetPinDirection+0x15c>)
 80002b6:	440b      	add	r3, r1
 80002b8:	6013      	str	r3, [r2, #0]
				break;
 80002ba:	e060      	b.n	800037e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOC->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 80002bc:	4b34      	ldr	r3, [pc, #208]	; (8000390 <MGPIO_voidSetPinDirection+0x160>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	210f      	movs	r1, #15
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	43d2      	mvns	r2, r2
 80002cc:	4013      	ands	r3, r2
 80002ce:	7bf9      	ldrb	r1, [r7, #15]
 80002d0:	79ba      	ldrb	r2, [r7, #6]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	4611      	mov	r1, r2
 80002da:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <MGPIO_voidSetPinDirection+0x160>)
 80002dc:	440b      	add	r3, r1
 80002de:	6013      	str	r3, [r2, #0]
				break;
 80002e0:	bf00      	nop
 80002e2:	e04c      	b.n	800037e <MGPIO_voidSetPinDirection+0x14e>
	else if (copy_u8Pin >= 8 && copy_u8Pin < 16)
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	2b07      	cmp	r3, #7
 80002e8:	d949      	bls.n	800037e <MGPIO_voidSetPinDirection+0x14e>
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	2b0f      	cmp	r3, #15
 80002ee:	d846      	bhi.n	800037e <MGPIO_voidSetPinDirection+0x14e>
		switch (copy_u8Port)
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d019      	beq.n	800032a <MGPIO_voidSetPinDirection+0xfa>
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d02c      	beq.n	8000354 <MGPIO_voidSetPinDirection+0x124>
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d000      	beq.n	8000300 <MGPIO_voidSetPinDirection+0xd0>
}
 80002fe:	e03e      	b.n	800037e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOA->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 8000300:	4b21      	ldr	r3, [pc, #132]	; (8000388 <MGPIO_voidSetPinDirection+0x158>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	79ba      	ldrb	r2, [r7, #6]
 8000306:	3a08      	subs	r2, #8
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	210f      	movs	r1, #15
 800030c:	fa01 f202 	lsl.w	r2, r1, r2
 8000310:	43d2      	mvns	r2, r2
 8000312:	4013      	ands	r3, r2
 8000314:	7bf9      	ldrb	r1, [r7, #15]
 8000316:	79ba      	ldrb	r2, [r7, #6]
 8000318:	3a08      	subs	r2, #8
 800031a:	0092      	lsls	r2, r2, #2
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	4611      	mov	r1, r2
 8000322:	4a19      	ldr	r2, [pc, #100]	; (8000388 <MGPIO_voidSetPinDirection+0x158>)
 8000324:	440b      	add	r3, r1
 8000326:	6053      	str	r3, [r2, #4]
				break;
 8000328:	e029      	b.n	800037e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOB->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 800032a:	4b18      	ldr	r3, [pc, #96]	; (800038c <MGPIO_voidSetPinDirection+0x15c>)
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	79ba      	ldrb	r2, [r7, #6]
 8000330:	3a08      	subs	r2, #8
 8000332:	0092      	lsls	r2, r2, #2
 8000334:	210f      	movs	r1, #15
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	43d2      	mvns	r2, r2
 800033c:	4013      	ands	r3, r2
 800033e:	7bf9      	ldrb	r1, [r7, #15]
 8000340:	79ba      	ldrb	r2, [r7, #6]
 8000342:	3a08      	subs	r2, #8
 8000344:	0092      	lsls	r2, r2, #2
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	4611      	mov	r1, r2
 800034c:	4a0f      	ldr	r2, [pc, #60]	; (800038c <MGPIO_voidSetPinDirection+0x15c>)
 800034e:	440b      	add	r3, r1
 8000350:	6053      	str	r3, [r2, #4]
				break;
 8000352:	e014      	b.n	800037e <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOC->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <MGPIO_voidSetPinDirection+0x160>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	79ba      	ldrb	r2, [r7, #6]
 800035a:	3a08      	subs	r2, #8
 800035c:	0092      	lsls	r2, r2, #2
 800035e:	210f      	movs	r1, #15
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	43d2      	mvns	r2, r2
 8000366:	4013      	ands	r3, r2
 8000368:	7bf9      	ldrb	r1, [r7, #15]
 800036a:	79ba      	ldrb	r2, [r7, #6]
 800036c:	3a08      	subs	r2, #8
 800036e:	0092      	lsls	r2, r2, #2
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a06      	ldr	r2, [pc, #24]	; (8000390 <MGPIO_voidSetPinDirection+0x160>)
 8000378:	440b      	add	r3, r1
 800037a:	6053      	str	r3, [r2, #4]
				break;
 800037c:	bf00      	nop
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bc90      	pop	{r4, r7}
 8000386:	4770      	bx	lr
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00
 8000390:	40011000 	.word	0x40011000

08000394 <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(GPIO_PORT copy_u8Port, u8 copy_u8Pin,
		GPIO_VALUE copy_u8Value)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
 800039e:	460b      	mov	r3, r1
 80003a0:	71bb      	strb	r3, [r7, #6]
 80003a2:	4613      	mov	r3, r2
 80003a4:	717b      	strb	r3, [r7, #5]
	if (copy_u8Pin < 16)
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	2b0f      	cmp	r3, #15
 80003aa:	d83a      	bhi.n	8000422 <MGPIO_voidSetPinValue+0x8e>
	{

		if (copy_u8Value == GPIO_HIGH)
 80003ac:	797b      	ldrb	r3, [r7, #5]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d11a      	bne.n	80003e8 <MGPIO_voidSetPinValue+0x54>
		{
			switch (copy_u8Port)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d00a      	beq.n	80003ce <MGPIO_voidSetPinValue+0x3a>
 80003b8:	2b02      	cmp	r3, #2
 80003ba:	d00e      	beq.n	80003da <MGPIO_voidSetPinValue+0x46>
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d000      	beq.n	80003c2 <MGPIO_voidSetPinValue+0x2e>
			}

		}

	}
}
 80003c0:	e02f      	b.n	8000422 <MGPIO_voidSetPinValue+0x8e>
					GPIOA->GPIO_BSRR = 1 << copy_u8Pin; // make advantage of atomic set
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	2201      	movs	r2, #1
 80003c6:	409a      	lsls	r2, r3
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MGPIO_voidSetPinValue+0x98>)
 80003ca:	611a      	str	r2, [r3, #16]
					break;
 80003cc:	e029      	b.n	8000422 <MGPIO_voidSetPinValue+0x8e>
					GPIOB->GPIO_BSRR = 1 << copy_u8Pin;
 80003ce:	79bb      	ldrb	r3, [r7, #6]
 80003d0:	2201      	movs	r2, #1
 80003d2:	409a      	lsls	r2, r3
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MGPIO_voidSetPinValue+0x9c>)
 80003d6:	611a      	str	r2, [r3, #16]
					break;
 80003d8:	e023      	b.n	8000422 <MGPIO_voidSetPinValue+0x8e>
					GPIOC->GPIO_BSRR = 1 << copy_u8Pin;
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	2201      	movs	r2, #1
 80003de:	409a      	lsls	r2, r3
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MGPIO_voidSetPinValue+0xa0>)
 80003e2:	611a      	str	r2, [r3, #16]
					break;
 80003e4:	bf00      	nop
 80003e6:	e01c      	b.n	8000422 <MGPIO_voidSetPinValue+0x8e>
		else if (copy_u8Value == GPIO_LOW)
 80003e8:	797b      	ldrb	r3, [r7, #5]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d119      	bne.n	8000422 <MGPIO_voidSetPinValue+0x8e>
			switch (copy_u8Port)
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d00a      	beq.n	800040a <MGPIO_voidSetPinValue+0x76>
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d00e      	beq.n	8000416 <MGPIO_voidSetPinValue+0x82>
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d000      	beq.n	80003fe <MGPIO_voidSetPinValue+0x6a>
}
 80003fc:	e011      	b.n	8000422 <MGPIO_voidSetPinValue+0x8e>
					GPIOA->GPIO_BRR = 1 << copy_u8Pin; // make advantage of atomic clear
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	2201      	movs	r2, #1
 8000402:	409a      	lsls	r2, r3
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MGPIO_voidSetPinValue+0x98>)
 8000406:	615a      	str	r2, [r3, #20]
					break;
 8000408:	e00b      	b.n	8000422 <MGPIO_voidSetPinValue+0x8e>
					GPIOB->GPIO_BRR = 1 << copy_u8Pin;
 800040a:	79bb      	ldrb	r3, [r7, #6]
 800040c:	2201      	movs	r2, #1
 800040e:	409a      	lsls	r2, r3
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <MGPIO_voidSetPinValue+0x9c>)
 8000412:	615a      	str	r2, [r3, #20]
					break;
 8000414:	e005      	b.n	8000422 <MGPIO_voidSetPinValue+0x8e>
					GPIOC->GPIO_BRR = 1 << copy_u8Pin;
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	2201      	movs	r2, #1
 800041a:	409a      	lsls	r2, r3
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <MGPIO_voidSetPinValue+0xa0>)
 800041e:	615a      	str	r2, [r3, #20]
					break;
 8000420:	bf00      	nop
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40010800 	.word	0x40010800
 8000430:	40010c00 	.word	0x40010c00
 8000434:	40011000 	.word	0x40011000

08000438 <MAFIO_voidSetEXTILineSource>:
	}
}

void MAFIO_voidSetEXTILineSource(AFIO_EXTI_LINE copy_u8line,
		AFIO_EXTI_LINE_SOURCE copy_u8Line_source)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	460a      	mov	r2, r1
 8000442:	71fb      	strb	r3, [r7, #7]
 8000444:	4613      	mov	r3, r2
 8000446:	71bb      	strb	r3, [r7, #6]
	volatile u32 *reg = AFIO_EXTICR1 + (copy_u8line / 4);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	089b      	lsrs	r3, r3, #2
 800044c:	b2db      	uxtb	r3, r3
 800044e:	009a      	lsls	r2, r3, #2
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MAFIO_voidSetEXTILineSource+0x54>)
 8000452:	4413      	add	r3, r2
 8000454:	60fb      	str	r3, [r7, #12]

	INS_FIELD((*reg), 0b1111, (4 * (copy_u8line % 4)), copy_u8Line_source);
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	79fa      	ldrb	r2, [r7, #7]
 800045c:	f002 0203 	and.w	r2, r2, #3
 8000460:	0092      	lsls	r2, r2, #2
 8000462:	210f      	movs	r1, #15
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	43d2      	mvns	r2, r2
 800046a:	4013      	ands	r3, r2
 800046c:	79b9      	ldrb	r1, [r7, #6]
 800046e:	79fa      	ldrb	r2, [r7, #7]
 8000470:	f002 0203 	and.w	r2, r2, #3
 8000474:	0092      	lsls	r2, r2, #2
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	441a      	add	r2, r3
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	601a      	str	r2, [r3, #0]

}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40010008 	.word	0x40010008

08000490 <MNVIC_voidEnableInterrupt>:
//	return GET_BIT((*local_reg), copy_ISRNumber % 32);
//}

/* to enable the interrupt */
void MNVIC_voidEnableInterrupt(u8 copy_ISRNumber)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_ISRNumber / 32] = 1 << (copy_ISRNumber % 32);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	f003 031f 	and.w	r3, r3, #31
 80004a0:	2201      	movs	r2, #1
 80004a2:	fa02 f103 	lsl.w	r1, r2, r3
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <MNVIC_voidEnableInterrupt+0x2c>)
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	095b      	lsrs	r3, r3, #5
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <MRCC_voidInit>:
u32 RCC_AHB_Frequency;
u32 RCC_APB1_Frequency;
u32 RCC_APB2_Frequency;

void MRCC_voidInit(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	/* assign the system clock global variable*/
	RCC_F_CPU = RCC_SYSTEM_CLOCK;
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MRCC_voidInit+0x48>)
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <MRCC_voidInit+0x4c>)
 80004c8:	601a      	str	r2, [r3, #0]

	/* assign the AHB frequency global variable*/
#if RCC_AHB_BUS_PRESCALER <=10
	RCC_AHB_Frequency = RCC_F_CPU >> (RCC_AHB_BUS_PRESCALER - 7);
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MRCC_voidInit+0x48>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a10      	ldr	r2, [pc, #64]	; (8000510 <MRCC_voidInit+0x50>)
 80004d0:	6013      	str	r3, [r2, #0]
#else
	RCC_AHB_Frequency = RCC_F_CPU>>(RCC_AHB_BUS_PRESCALER-7+1);
#endif

	/* assign the APB1 & APB2 frequency global variable */
	RCC_APB1_Frequency = RCC_F_CPU >> (RCC_APB1_BUS_PRESCALER - 3);
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <MRCC_voidInit+0x48>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	085b      	lsrs	r3, r3, #1
 80004d8:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <MRCC_voidInit+0x54>)
 80004da:	6013      	str	r3, [r2, #0]
	RCC_APB2_Frequency = RCC_F_CPU >> (RCC_APB2_BUS_PRESCALER - 3);
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MRCC_voidInit+0x48>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	085b      	lsrs	r3, r3, #1
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <MRCC_voidInit+0x58>)
 80004e4:	6013      	str	r3, [r2, #0]

	MRCC_voidSetBusClocks(RCC_AHB_BUS_PRESCALER, RCC_APB1_BUS_PRESCALER,
 80004e6:	2204      	movs	r2, #4
 80004e8:	2104      	movs	r1, #4
 80004ea:	2007      	movs	r0, #7
 80004ec:	f000 f898 	bl	8000620 <MRCC_voidSetBusClocks>
	SET_BIT(RCC->RCC_CFGR, 16); //PLLSRC
	INS_FIELD(RCC->RCC_CFGR, 0x1111, 18, (RCC_PLL_MUL_FACTOR-2));

#endif

	MRCC_voidEnableClockSource(RCC_SYSTEM_CLOCK_SOURCE, RCC_STATUS_ON);
 80004f0:	2101      	movs	r1, #1
 80004f2:	2011      	movs	r0, #17
 80004f4:	f000 f872 	bl	80005dc <MRCC_voidEnableClockSource>

	MRCC_u8CheckClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80004f8:	2011      	movs	r0, #17
 80004fa:	f000 f80f 	bl	800051c <MRCC_u8CheckClockSource>

	MRCC_voidSetClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80004fe:	2011      	movs	r0, #17
 8000500:	f000 f840 	bl	8000584 <MRCC_voidSetClockSource>

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000020 	.word	0x20000020
 800050c:	007a1200 	.word	0x007a1200
 8000510:	20000028 	.word	0x20000028
 8000514:	20000024 	.word	0x20000024
 8000518:	2000002c 	.word	0x2000002c

0800051c <MRCC_u8CheckClockSource>:

u8 MRCC_u8CheckClockSource(RCC_CLOCK_SOURCE copy_u8CLK)
{
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	u32 max_wait_time = 50000;
 8000526:	f24c 3350 	movw	r3, #50000	; 0xc350
 800052a:	60fb      	str	r3, [r7, #12]
	u32 counter = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
	u8 state = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	74fb      	strb	r3, [r7, #19]

	if ((copy_u8CLK != RCC_HSI) && (copy_u8CLK != RCC_HSE)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d011      	beq.n	800055e <MRCC_u8CheckClockSource+0x42>
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b11      	cmp	r3, #17
 800053e:	d00e      	beq.n	800055e <MRCC_u8CheckClockSource+0x42>
			&& (copy_u8CLK != RCC_PLL)) state = 0;
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b19      	cmp	r3, #25
 8000544:	d00b      	beq.n	800055e <MRCC_u8CheckClockSource+0x42>
 8000546:	2300      	movs	r3, #0
 8000548:	74fb      	strb	r3, [r7, #19]
 800054a:	e013      	b.n	8000574 <MRCC_u8CheckClockSource+0x58>
	else
	{
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
		{
			counter++;
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	3301      	adds	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
			state = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	74fb      	strb	r3, [r7, #19]
			if (counter == max_wait_time) break;
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	429a      	cmp	r2, r3
 800055c:	d009      	beq.n	8000572 <MRCC_u8CheckClockSource+0x56>
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MRCC_u8CheckClockSource+0x64>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	fa22 f303 	lsr.w	r3, r2, r3
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0ed      	beq.n	800054c <MRCC_u8CheckClockSource+0x30>
 8000570:	e000      	b.n	8000574 <MRCC_u8CheckClockSource+0x58>
			if (counter == max_wait_time) break;
 8000572:	bf00      	nop
		}
	}
	return state;
 8000574:	7cfb      	ldrb	r3, [r7, #19]
}
 8000576:	4618      	mov	r0, r3
 8000578:	371c      	adds	r7, #28
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <MRCC_voidSetClockSource>:

void MRCC_voidSetClockSource(RCC_CLOCK_SOURCE copy_u8Source)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8Source)
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b11      	cmp	r3, #17
 8000592:	d00b      	beq.n	80005ac <MRCC_voidSetClockSource+0x28>
 8000594:	2b19      	cmp	r3, #25
 8000596:	d011      	beq.n	80005bc <MRCC_voidSetClockSource+0x38>
 8000598:	2b01      	cmp	r3, #1
 800059a:	d000      	beq.n	800059e <MRCC_voidSetClockSource+0x1a>
			break;
		case RCC_PLL:
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
			break;
	}
}
 800059c:	e016      	b.n	80005cc <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 0);
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MRCC_voidSetClockSource+0x54>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <MRCC_voidSetClockSource+0x54>)
 80005a4:	f023 0303 	bic.w	r3, r3, #3
 80005a8:	6053      	str	r3, [r2, #4]
			break;
 80005aa:	e00f      	b.n	80005cc <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 1);
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <MRCC_voidSetClockSource+0x54>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f023 0303 	bic.w	r3, r3, #3
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <MRCC_voidSetClockSource+0x54>)
 80005b6:	3301      	adds	r3, #1
 80005b8:	6053      	str	r3, [r2, #4]
			break;
 80005ba:	e007      	b.n	80005cc <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MRCC_voidSetClockSource+0x54>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	f023 0303 	bic.w	r3, r3, #3
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <MRCC_voidSetClockSource+0x54>)
 80005c6:	3302      	adds	r3, #2
 80005c8:	6053      	str	r3, [r2, #4]
			break;
 80005ca:	bf00      	nop
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <MRCC_voidEnableClockSource>:

void MRCC_voidEnableClockSource(RCC_CLOCK_SOURCE copy_u8ClockSource,
		RCC_STATES copy_u8state)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	460a      	mov	r2, r1
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	4613      	mov	r3, r2
 80005ea:	71bb      	strb	r3, [r7, #6]
	// the insert function offset value is determined with the bus variable
	// which is specified in the interface file
	INS_BIT(RCC->RCC_CR, (copy_u8ClockSource - 1), copy_u8state); // source_ON bit
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MRCC_voidEnableClockSource+0x40>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	79fa      	ldrb	r2, [r7, #7]
 80005f2:	3a01      	subs	r2, #1
 80005f4:	2101      	movs	r1, #1
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	43d2      	mvns	r2, r2
 80005fc:	4013      	ands	r3, r2
 80005fe:	79b9      	ldrb	r1, [r7, #6]
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	3a01      	subs	r2, #1
 8000604:	fa01 f202 	lsl.w	r2, r1, r2
 8000608:	4611      	mov	r1, r2
 800060a:	4a04      	ldr	r2, [pc, #16]	; (800061c <MRCC_voidEnableClockSource+0x40>)
 800060c:	430b      	orrs	r3, r1
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <MRCC_voidSetBusClocks>:

void MRCC_voidSetBusClocks(RCC_AHB_PRESCALER copy_AHB,
		RCC_APB_PRESCALER copy_APB1, RCC_APB_PRESCALER copy_APB2)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
 800062a:	460b      	mov	r3, r1
 800062c:	71bb      	strb	r3, [r7, #6]
 800062e:	4613      	mov	r3, r2
 8000630:	717b      	strb	r3, [r7, #5]
	// AHB prescaler is different 4-bits wide

	INS_FIELD(RCC->RCC_CFGR, 0b1111, 4, copy_AHB);
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MRCC_voidSetBusClocks+0x58>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	4611      	mov	r1, r2
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <MRCC_voidSetBusClocks+0x58>)
 8000642:	440b      	add	r3, r1
 8000644:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 8, copy_APB1);
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MRCC_voidSetBusClocks+0x58>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800064e:	79ba      	ldrb	r2, [r7, #6]
 8000650:	0212      	lsls	r2, r2, #8
 8000652:	4611      	mov	r1, r2
 8000654:	4a08      	ldr	r2, [pc, #32]	; (8000678 <MRCC_voidSetBusClocks+0x58>)
 8000656:	440b      	add	r3, r1
 8000658:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 11, copy_APB2);
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MRCC_voidSetBusClocks+0x58>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000662:	797a      	ldrb	r2, [r7, #5]
 8000664:	02d2      	lsls	r2, r2, #11
 8000666:	4611      	mov	r1, r2
 8000668:	4a03      	ldr	r2, [pc, #12]	; (8000678 <MRCC_voidSetBusClocks+0x58>)
 800066a:	440b      	add	r3, r1
 800066c:	6053      	str	r3, [r2, #4]

}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000

0800067c <MRCC_voidSetPeripheralClock>:

void MRCC_voidSetPeripheralClock(RCC_BUS copy_u8Bus, u8 copy_u8PeripheralNum,
		RCC_STATES copy_periph_status)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	460b      	mov	r3, r1
 8000688:	71bb      	strb	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	717b      	strb	r3, [r7, #5]
	// dis/enable the desired peripheral on the specified bus
	// the insert function ofset value is determened with the bus variable
	// which is specified in the interface file
	if (copy_u8Bus == RCC_AHB_BUS)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d110      	bne.n	80006b6 <MRCC_voidSetPeripheralClock+0x3a>
	{
		INS_BIT(RCC->RCC_AHBENR, copy_u8PeripheralNum, copy_periph_status);
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MRCC_voidSetPeripheralClock+0x94>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	79ba      	ldrb	r2, [r7, #6]
 800069a:	2101      	movs	r1, #1
 800069c:	fa01 f202 	lsl.w	r2, r1, r2
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	4013      	ands	r3, r2
 80006a4:	7979      	ldrb	r1, [r7, #5]
 80006a6:	79ba      	ldrb	r2, [r7, #6]
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MRCC_voidSetPeripheralClock+0x94>)
 80006b0:	430b      	orrs	r3, r1
 80006b2:	6153      	str	r3, [r2, #20]
	}
	else if (copy_u8Bus == RCC_APB2_BUS)
	{
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
	}
}
 80006b4:	e026      	b.n	8000704 <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB1_BUS)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d110      	bne.n	80006de <MRCC_voidSetPeripheralClock+0x62>
		INS_BIT(RCC->RCC_APB1ENR, copy_u8PeripheralNum, copy_periph_status);
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MRCC_voidSetPeripheralClock+0x94>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	79ba      	ldrb	r2, [r7, #6]
 80006c2:	2101      	movs	r1, #1
 80006c4:	fa01 f202 	lsl.w	r2, r1, r2
 80006c8:	43d2      	mvns	r2, r2
 80006ca:	4013      	ands	r3, r2
 80006cc:	7979      	ldrb	r1, [r7, #5]
 80006ce:	79ba      	ldrb	r2, [r7, #6]
 80006d0:	fa01 f202 	lsl.w	r2, r1, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <MRCC_voidSetPeripheralClock+0x94>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	61d3      	str	r3, [r2, #28]
}
 80006dc:	e012      	b.n	8000704 <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB2_BUS)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b0b      	cmp	r3, #11
 80006e2:	d10f      	bne.n	8000704 <MRCC_voidSetPeripheralClock+0x88>
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MRCC_voidSetPeripheralClock+0x94>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	79ba      	ldrb	r2, [r7, #6]
 80006ea:	2101      	movs	r1, #1
 80006ec:	fa01 f202 	lsl.w	r2, r1, r2
 80006f0:	43d2      	mvns	r2, r2
 80006f2:	4013      	ands	r3, r2
 80006f4:	7979      	ldrb	r1, [r7, #5]
 80006f6:	79ba      	ldrb	r2, [r7, #6]
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	4611      	mov	r1, r2
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <MRCC_voidSetPeripheralClock+0x94>)
 8000700:	430b      	orrs	r3, r1
 8000702:	6193      	str	r3, [r2, #24]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <EXTI0_IRQHandler>:
#include "../Inc/MCAL/GPIO/GPIO_interface.h"
#include "../Inc/MCAL/NVIC/NVIC_interface.h"
#include "../Inc/MCAL/EXTI/EXTI_interface.h"

void EXTI0_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	MEXTI_voidClearPending(EXTI_LINE0);
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff fd77 	bl	800020c <MEXTI_voidClearPending>
	static u8 x = 0;

	if (x == 0)
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <EXTI0_IRQHandler+0x38>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d108      	bne.n	8000738 <EXTI0_IRQHandler+0x24>
	{
		MGPIO_voidSetPinValue(GPIO_PORTB, 1, GPIO_LOW);
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff fe32 	bl	8000394 <MGPIO_voidSetPinValue>
		x = 1;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <EXTI0_IRQHandler+0x38>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
	{
		MGPIO_voidSetPinValue(GPIO_PORTB, 1, GPIO_HIGH);
		x = 0;
	}

}
 8000736:	e007      	b.n	8000748 <EXTI0_IRQHandler+0x34>
		MGPIO_voidSetPinValue(GPIO_PORTB, 1, GPIO_HIGH);
 8000738:	2201      	movs	r2, #1
 800073a:	2101      	movs	r1, #1
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff fe29 	bl	8000394 <MGPIO_voidSetPinValue>
		x = 0;
 8000742:	4b02      	ldr	r3, [pc, #8]	; (800074c <EXTI0_IRQHandler+0x38>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000001c 	.word	0x2000001c

08000750 <main>:

int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	//RCC
	MRCC_voidInit();
 8000754:	f7ff feb4 	bl	80004c0 <MRCC_voidInit>
	MRCC_voidSetPeripheralClock(RCC_GPIOB, RCC_STATUS_ON);
 8000758:	2201      	movs	r2, #1
 800075a:	2103      	movs	r1, #3
 800075c:	200b      	movs	r0, #11
 800075e:	f7ff ff8d 	bl	800067c <MRCC_voidSetPeripheralClock>
	MRCC_voidSetPeripheralClock(RCC_AFIO, RCC_STATUS_ON);
 8000762:	2201      	movs	r2, #1
 8000764:	2100      	movs	r1, #0
 8000766:	200b      	movs	r0, #11
 8000768:	f7ff ff88 	bl	800067c <MRCC_voidSetPeripheralClock>

	//GPIO
	MGPIO_voidSetPinDirection(GPIO_PORTB, 0, GPIO_MODE_INPUT,
 800076c:	2306      	movs	r3, #6
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fd5c 	bl	8000230 <MGPIO_voidSetPinDirection>
			GPIO_INPUT_CNFG_PUSH_PULL);
	MGPIO_voidSetPinValue(GPIO_PORTB, 0, GPIO_HIGH);
 8000778:	2201      	movs	r2, #1
 800077a:	2100      	movs	r1, #0
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff fe09 	bl	8000394 <MGPIO_voidSetPinValue>

	MGPIO_voidSetPinDirection(GPIO_PORTB, 1, GPIO_MODE_OUTPUT_2_MHZ,
 8000782:	2300      	movs	r3, #0
 8000784:	2202      	movs	r2, #2
 8000786:	2101      	movs	r1, #1
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff fd51 	bl	8000230 <MGPIO_voidSetPinDirection>
			GPIO_OUTPUT_CNFG_GP_PP);

	//AFIO
	MAFIO_voidSetEXTILineSource(AFIO_EXTI0_LINE, AFIO_EXTI_GPIOB);
 800078e:	2101      	movs	r1, #1
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff fe51 	bl	8000438 <MAFIO_voidSetEXTILineSource>

	//NVIC
	MNVIC_voidEnableInterrupt(NVIC_EXTI0);
 8000796:	2006      	movs	r0, #6
 8000798:	f7ff fe7a 	bl	8000490 <MNVIC_voidEnableInterrupt>

	//EXTI
	MEXTI_voidSetInterruptMode(EXTI_LINE0, EXTI_FALLING);
 800079c:	2101      	movs	r1, #1
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff fce6 	bl	8000170 <MEXTI_voidSetInterruptMode>
	MEXTI_voidEXTILineStatus(EXTI_LINE0, EXTI_ENABLE);
 80007a4:	2101      	movs	r1, #1
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fd10 	bl	80001cc <MEXTI_voidEXTILineStatus>

	while (1)
 80007ac:	e7fe      	b.n	80007ac <main+0x5c>
	...

080007b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <LoopForever+0x6>)
  ldr r1, =_edata
 80007ba:	490d      	ldr	r1, [pc, #52]	; (80007f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <LoopForever+0xe>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d0:	4c0a      	ldr	r4, [pc, #40]	; (80007fc <LoopForever+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007de:	f000 f811 	bl	8000804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff ffb5 	bl	8000750 <main>

080007e6 <LoopForever>:

LoopForever:
    b LoopForever
 80007e6:	e7fe      	b.n	80007e6 <LoopForever>
  ldr   r0, =_estack
 80007e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007f4:	0800086c 	.word	0x0800086c
  ldr r2, =_sbss
 80007f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007fc:	20000030 	.word	0x20000030

08000800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC1_2_IRQHandler>
	...

08000804 <__libc_init_array>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	2500      	movs	r5, #0
 8000808:	4e0c      	ldr	r6, [pc, #48]	; (800083c <__libc_init_array+0x38>)
 800080a:	4c0d      	ldr	r4, [pc, #52]	; (8000840 <__libc_init_array+0x3c>)
 800080c:	1ba4      	subs	r4, r4, r6
 800080e:	10a4      	asrs	r4, r4, #2
 8000810:	42a5      	cmp	r5, r4
 8000812:	d109      	bne.n	8000828 <__libc_init_array+0x24>
 8000814:	f000 f81a 	bl	800084c <_init>
 8000818:	2500      	movs	r5, #0
 800081a:	4e0a      	ldr	r6, [pc, #40]	; (8000844 <__libc_init_array+0x40>)
 800081c:	4c0a      	ldr	r4, [pc, #40]	; (8000848 <__libc_init_array+0x44>)
 800081e:	1ba4      	subs	r4, r4, r6
 8000820:	10a4      	asrs	r4, r4, #2
 8000822:	42a5      	cmp	r5, r4
 8000824:	d105      	bne.n	8000832 <__libc_init_array+0x2e>
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800082c:	4798      	blx	r3
 800082e:	3501      	adds	r5, #1
 8000830:	e7ee      	b.n	8000810 <__libc_init_array+0xc>
 8000832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000836:	4798      	blx	r3
 8000838:	3501      	adds	r5, #1
 800083a:	e7f2      	b.n	8000822 <__libc_init_array+0x1e>
 800083c:	08000864 	.word	0x08000864
 8000840:	08000864 	.word	0x08000864
 8000844:	08000864 	.word	0x08000864
 8000848:	08000868 	.word	0x08000868

0800084c <_init>:
 800084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084e:	bf00      	nop
 8000850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000852:	bc08      	pop	{r3}
 8000854:	469e      	mov	lr, r3
 8000856:	4770      	bx	lr

08000858 <_fini>:
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	bf00      	nop
 800085c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085e:	bc08      	pop	{r3}
 8000860:	469e      	mov	lr, r3
 8000862:	4770      	bx	lr
