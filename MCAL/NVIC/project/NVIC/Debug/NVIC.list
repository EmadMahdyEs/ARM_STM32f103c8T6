
NVIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000353  00000000  00000000  0001041d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000179  00000000  00000000  00010770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000098  00000000  00000000  000108f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000070  00000000  00000000  00010988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000000c9  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000002cc  00000000  00000000  00010ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003269  00000000  00000000  00010d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00013ff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000184  00000000  00000000  00014074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003d4 	.word	0x080003d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003d4 	.word	0x080003d4

08000170 <MNVIC_voidSetPendingInterrupt>:
	NVIC->NVIC_ICER[copy_ISRNumber / 32] = 1 << (copy_ISRNumber % 32);
}

/* set the certain interrupt to pending*/
void MNVIC_voidSetPendingInterrupt(u8 copy_ISRNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISPR[copy_ISRNumber / 32] = 1 << (copy_ISRNumber % 32);
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f003 031f 	and.w	r3, r3, #31
 8000180:	2201      	movs	r2, #1
 8000182:	fa02 f103 	lsl.w	r1, r2, r3
 8000186:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <MNVIC_voidSetPendingInterrupt+0x30>)
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	095b      	lsrs	r3, r3, #5
 800018c:	b2db      	uxtb	r3, r3
 800018e:	3340      	adds	r3, #64	; 0x40
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	e000e100 	.word	0xe000e100

080001a4 <MNVIC_voidClearPendingInterrupt>:

void MNVIC_voidClearPendingInterrupt(u8 copy_ISRNumber)
{
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ICPR[copy_ISRNumber / 32] = 1 << (copy_ISRNumber % 32);
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	f003 031f 	and.w	r3, r3, #31
 80001b4:	2201      	movs	r2, #1
 80001b6:	fa02 f103 	lsl.w	r1, r2, r3
 80001ba:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <MNVIC_voidClearPendingInterrupt+0x30>)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	095b      	lsrs	r3, r3, #5
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	3360      	adds	r3, #96	; 0x60
 80001c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	e000e100 	.word	0xe000e100

080001d8 <MNVIC_voidSetPriorityGrouping>:
{
	return GET_BIT(NVIC->NVIC_ISER[copy_ISRNumber/32], (copy_ISRNumber % 32));
}

void MNVIC_voidSetPriorityGrouping(PRIORITY_GROUPING_t copy_value)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	SCB_REG_AIRCR = (copy_value << 8) | (0x5FA << 16);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	021b      	lsls	r3, r3, #8
 80001e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ee:	4a03      	ldr	r2, [pc, #12]	; (80001fc <MNVIC_voidSetPriorityGrouping+0x24>)
 80001f0:	6013      	str	r3, [r2, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	e000ed0c 	.word	0xe000ed0c

08000200 <MNVIC_voidSetISRPriority>:

void MNVIC_voidSetISRPriority(s8 copy_ISRNumber,
		PRIORITY_GROUPING_t copy_GroupingType, u8 copy_Group, u8 copy_Sub)
{
 8000200:	b490      	push	{r4, r7}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	4604      	mov	r4, r0
 8000208:	4608      	mov	r0, r1
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	4623      	mov	r3, r4
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4603      	mov	r3, r0
 8000214:	71bb      	strb	r3, [r7, #6]
 8000216:	460b      	mov	r3, r1
 8000218:	717b      	strb	r3, [r7, #5]
 800021a:	4613      	mov	r3, r2
 800021c:	713b      	strb	r3, [r7, #4]
	/*
	 * 1- (copy_GroupingType - 3) to know how may bits are shifted
	 * 2- shift group value according to the previous value
	 * 3- add sub group value in the place which is now available after the shift
	 */
	u8 local = copy_Sub | (copy_Group << (copy_GroupingType - 3));
 800021e:	797a      	ldrb	r2, [r7, #5]
 8000220:	79bb      	ldrb	r3, [r7, #6]
 8000222:	3b03      	subs	r3, #3
 8000224:	fa02 f303 	lsl.w	r3, r2, r3
 8000228:	b25a      	sxtb	r2, r3
 800022a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800022e:	4313      	orrs	r3, r2
 8000230:	b25b      	sxtb	r3, r3
 8000232:	73fb      	strb	r3, [r7, #15]
	if (copy_ISRNumber >= 0)
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db09      	blt.n	8000250 <MNVIC_voidSetISRPriority+0x50>
	{
		NVIC->NVIC_IPR[copy_ISRNumber] = local << 4;
 800023c:	4926      	ldr	r1, [pc, #152]	; (80002d8 <MNVIC_voidSetISRPriority+0xd8>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	7bfa      	ldrb	r2, [r7, #15]
 8000244:	0112      	lsls	r2, r2, #4
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	440b      	add	r3, r1
 800024a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	else
	{
		INS_FIELD(*(SCB_REG_SHPR+(-copy_ISRNumber)/4 -1), 0b1111,
				((-copy_ISRNumber) % 4 * 8 + 4), local);
	}
}
 800024e:	e03d      	b.n	80002cc <MNVIC_voidSetISRPriority+0xcc>
		INS_FIELD(*(SCB_REG_SHPR+(-copy_ISRNumber)/4 -1), 0b1111,
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	425b      	negs	r3, r3
 8000256:	2b00      	cmp	r3, #0
 8000258:	da00      	bge.n	800025c <MNVIC_voidSetISRPriority+0x5c>
 800025a:	3303      	adds	r3, #3
 800025c:	109b      	asrs	r3, r3, #2
 800025e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000262:	3b01      	subs	r3, #1
 8000264:	009a      	lsls	r2, r3, #2
 8000266:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <MNVIC_voidSetISRPriority+0xdc>)
 8000268:	4413      	add	r3, r2
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000270:	425b      	negs	r3, r3
 8000272:	4259      	negs	r1, r3
 8000274:	f003 0303 	and.w	r3, r3, #3
 8000278:	f001 0103 	and.w	r1, r1, #3
 800027c:	bf58      	it	pl
 800027e:	424b      	negpl	r3, r1
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	3304      	adds	r3, #4
 8000284:	210f      	movs	r1, #15
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	43db      	mvns	r3, r3
 800028c:	401a      	ands	r2, r3
 800028e:	7bf9      	ldrb	r1, [r7, #15]
 8000290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000294:	425b      	negs	r3, r3
 8000296:	4258      	negs	r0, r3
 8000298:	f003 0303 	and.w	r3, r3, #3
 800029c:	f000 0003 	and.w	r0, r0, #3
 80002a0:	bf58      	it	pl
 80002a2:	4243      	negpl	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	3304      	adds	r3, #4
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	4618      	mov	r0, r3
 80002ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b2:	425b      	negs	r3, r3
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <MNVIC_voidSetISRPriority+0xba>
 80002b8:	3303      	adds	r3, #3
 80002ba:	109b      	asrs	r3, r3, #2
 80002bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002c0:	3b01      	subs	r3, #1
 80002c2:	0099      	lsls	r1, r3, #2
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <MNVIC_voidSetISRPriority+0xdc>)
 80002c6:	440b      	add	r3, r1
 80002c8:	4402      	add	r2, r0
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc90      	pop	{r4, r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100
 80002dc:	e000ed18 	.word	0xe000ed18

080002e0 <main>:
#include "../Inc/MCAL/RCC/RCC_interface.h"
#include "../Inc/MCAL/GPIO/GPIO_interface.h"
#include "../Inc/MCAL/NVIC/NVIC_interface.h"

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0

	MNVIC_voidSetPendingInterrupt(2);
 80002e4:	2002      	movs	r0, #2
 80002e6:	f7ff ff43 	bl	8000170 <MNVIC_voidSetPendingInterrupt>

	MNVIC_voidSetPendingInterrupt(8);
 80002ea:	2008      	movs	r0, #8
 80002ec:	f7ff ff40 	bl	8000170 <MNVIC_voidSetPendingInterrupt>

	MNVIC_voidSetPendingInterrupt(34);
 80002f0:	2022      	movs	r0, #34	; 0x22
 80002f2:	f7ff ff3d 	bl	8000170 <MNVIC_voidSetPendingInterrupt>

	MNVIC_voidSetPriorityGrouping(NVIC_8_GROUP_2_SUB);
 80002f6:	2004      	movs	r0, #4
 80002f8:	f7ff ff6e 	bl	80001d8 <MNVIC_voidSetPriorityGrouping>

	MNVIC_voidSetISRPriority(9, NVIC_4_GROUP_4_SUB, 3, 3);
 80002fc:	2303      	movs	r3, #3
 80002fe:	2203      	movs	r2, #3
 8000300:	2105      	movs	r1, #5
 8000302:	2009      	movs	r0, #9
 8000304:	f7ff ff7c 	bl	8000200 <MNVIC_voidSetISRPriority>

	MNVIC_voidSetISRPriority(NVIC_USAGE_FAULT, NVIC_4_GROUP_4_SUB, 3, 3);
 8000308:	2303      	movs	r3, #3
 800030a:	2203      	movs	r2, #3
 800030c:	2105      	movs	r1, #5
 800030e:	f06f 0005 	mvn.w	r0, #5
 8000312:	f7ff ff75 	bl	8000200 <MNVIC_voidSetISRPriority>
	MNVIC_voidSetISRPriority(NVIC_SYSTICK, NVIC_4_GROUP_4_SUB, 3, 3);
 8000316:	2303      	movs	r3, #3
 8000318:	2203      	movs	r2, #3
 800031a:	2105      	movs	r1, #5
 800031c:	f06f 000e 	mvn.w	r0, #14
 8000320:	f7ff ff6e 	bl	8000200 <MNVIC_voidSetISRPriority>

	MNVIC_voidClearPendingInterrupt(2);
 8000324:	2002      	movs	r0, #2
 8000326:	f7ff ff3d 	bl	80001a4 <MNVIC_voidClearPendingInterrupt>
	MNVIC_voidClearPendingInterrupt(8);
 800032a:	2008      	movs	r0, #8
 800032c:	f7ff ff3a 	bl	80001a4 <MNVIC_voidClearPendingInterrupt>
	MNVIC_voidClearPendingInterrupt(34);
 8000330:	2022      	movs	r0, #34	; 0x22
 8000332:	f7ff ff37 	bl	80001a4 <MNVIC_voidClearPendingInterrupt>
	/* Loop forever */
	while (1)
 8000336:	e7fe      	b.n	8000336 <main+0x56>

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ffb9 	bl	80002e0 <main>

0800036e <LoopForever>:

LoopForever:
    b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	2000001c 	.word	0x2000001c

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	2500      	movs	r5, #0
 8000390:	4e0c      	ldr	r6, [pc, #48]	; (80003c4 <__libc_init_array+0x38>)
 8000392:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000394:	1ba4      	subs	r4, r4, r6
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	42a5      	cmp	r5, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	f000 f81a 	bl	80003d4 <_init>
 80003a0:	2500      	movs	r5, #0
 80003a2:	4e0a      	ldr	r6, [pc, #40]	; (80003cc <__libc_init_array+0x40>)
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <__libc_init_array+0x44>)
 80003a6:	1ba4      	subs	r4, r4, r6
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	42a5      	cmp	r5, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003b4:	4798      	blx	r3
 80003b6:	3501      	adds	r5, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003be:	4798      	blx	r3
 80003c0:	3501      	adds	r5, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
