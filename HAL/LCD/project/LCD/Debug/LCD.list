
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e18  08000e18  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000e18  08000e18  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e18  08000e18  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e18  08000e18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000010  08000e30  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000e30  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fa9  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004ff  00000000  00000000  00020fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  000214e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  000216c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000eb5  00000000  00000000  00021840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000971  00000000  00000000  000226f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004669  00000000  00000000  00023066  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000276cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000061c  00000000  00000000  0002774c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000df8 	.word	0x08000df8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000df8 	.word	0x08000df8

08000170 <MGPIO_voidSetPortDirection>:
#include "../Inc/MCAL/GPIO/GPIO_private.h"
#include "../Inc/MCAL/GPIO/GPIO_configuration.h"

void MGPIO_voidSetPortDirection(GPIO_PORT copy_u8Port, u8 copy_Start,
		u8 copy_end, GPIO_MODE copy_u8Mode, GPIO_CONFIGURATION copy_u8CNFG)
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	4603      	mov	r3, r0
 8000184:	71bb      	strb	r3, [r7, #6]
 8000186:	460b      	mov	r3, r1
 8000188:	717b      	strb	r3, [r7, #5]
 800018a:	4613      	mov	r3, r2
 800018c:	713b      	strb	r3, [r7, #4]
	for (int i = copy_Start; i <= copy_end; i++)
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	60fb      	str	r3, [r7, #12]
 8000192:	e00a      	b.n	80001aa <MGPIO_voidSetPortDirection+0x3a>
	{
		MGPIO_voidSetPinDirection(copy_u8Port, i, copy_u8Mode, copy_u8CNFG);
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	b2d9      	uxtb	r1, r3
 8000198:	f897 3020 	ldrb.w	r3, [r7, #32]
 800019c:	793a      	ldrb	r2, [r7, #4]
 800019e:	79f8      	ldrb	r0, [r7, #7]
 80001a0:	f000 f80c 	bl	80001bc <MGPIO_voidSetPinDirection>
	for (int i = copy_Start; i <= copy_end; i++)
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	3301      	adds	r3, #1
 80001a8:	60fb      	str	r3, [r7, #12]
 80001aa:	797b      	ldrb	r3, [r7, #5]
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	ddf0      	ble.n	8000194 <MGPIO_voidSetPortDirection+0x24>
	}
}
 80001b2:	bf00      	nop
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd90      	pop	{r4, r7, pc}
	...

080001bc <MGPIO_voidSetPinDirection>:

void MGPIO_voidSetPinDirection(GPIO_PORT copy_u8Port, u8 copy_u8Pin,
		GPIO_MODE copy_u8Mode, GPIO_CONFIGURATION copy_u8CNFG)
{
 80001bc:	b490      	push	{r4, r7}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4604      	mov	r4, r0
 80001c4:	4608      	mov	r0, r1
 80001c6:	4611      	mov	r1, r2
 80001c8:	461a      	mov	r2, r3
 80001ca:	4623      	mov	r3, r4
 80001cc:	71fb      	strb	r3, [r7, #7]
 80001ce:	4603      	mov	r3, r0
 80001d0:	71bb      	strb	r3, [r7, #6]
 80001d2:	460b      	mov	r3, r1
 80001d4:	717b      	strb	r3, [r7, #5]
 80001d6:	4613      	mov	r3, r2
 80001d8:	713b      	strb	r3, [r7, #4]
	u8 field = (copy_u8CNFG << 2) + copy_u8Mode;
 80001da:	793b      	ldrb	r3, [r7, #4]
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	797b      	ldrb	r3, [r7, #5]
 80001e2:	4413      	add	r3, r2
 80001e4:	73fb      	strb	r3, [r7, #15]
	if (copy_u8Pin < 8)
 80001e6:	79bb      	ldrb	r3, [r7, #6]
 80001e8:	2b07      	cmp	r3, #7
 80001ea:	d841      	bhi.n	8000270 <MGPIO_voidSetPinDirection+0xb4>
	{
		switch (copy_u8Port)
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d017      	beq.n	8000222 <MGPIO_voidSetPinDirection+0x66>
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	d028      	beq.n	8000248 <MGPIO_voidSetPinDirection+0x8c>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d000      	beq.n	80001fc <MGPIO_voidSetPinDirection+0x40>
						field);
				break;

		}
	}
}
 80001fa:	e086      	b.n	800030a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOA->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 80001fc:	4b45      	ldr	r3, [pc, #276]	; (8000314 <MGPIO_voidSetPinDirection+0x158>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	79ba      	ldrb	r2, [r7, #6]
 8000202:	0092      	lsls	r2, r2, #2
 8000204:	210f      	movs	r1, #15
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	43d2      	mvns	r2, r2
 800020c:	4013      	ands	r3, r2
 800020e:	7bf9      	ldrb	r1, [r7, #15]
 8000210:	79ba      	ldrb	r2, [r7, #6]
 8000212:	0092      	lsls	r2, r2, #2
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	4611      	mov	r1, r2
 800021a:	4a3e      	ldr	r2, [pc, #248]	; (8000314 <MGPIO_voidSetPinDirection+0x158>)
 800021c:	440b      	add	r3, r1
 800021e:	6013      	str	r3, [r2, #0]
				break;
 8000220:	e073      	b.n	800030a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOB->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 8000222:	4b3d      	ldr	r3, [pc, #244]	; (8000318 <MGPIO_voidSetPinDirection+0x15c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	79ba      	ldrb	r2, [r7, #6]
 8000228:	0092      	lsls	r2, r2, #2
 800022a:	210f      	movs	r1, #15
 800022c:	fa01 f202 	lsl.w	r2, r1, r2
 8000230:	43d2      	mvns	r2, r2
 8000232:	4013      	ands	r3, r2
 8000234:	7bf9      	ldrb	r1, [r7, #15]
 8000236:	79ba      	ldrb	r2, [r7, #6]
 8000238:	0092      	lsls	r2, r2, #2
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a35      	ldr	r2, [pc, #212]	; (8000318 <MGPIO_voidSetPinDirection+0x15c>)
 8000242:	440b      	add	r3, r1
 8000244:	6013      	str	r3, [r2, #0]
				break;
 8000246:	e060      	b.n	800030a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOC->GPIO_CRL, 0b1111, (copy_u8Pin * 4), field);
 8000248:	4b34      	ldr	r3, [pc, #208]	; (800031c <MGPIO_voidSetPinDirection+0x160>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	210f      	movs	r1, #15
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	43d2      	mvns	r2, r2
 8000258:	4013      	ands	r3, r2
 800025a:	7bf9      	ldrb	r1, [r7, #15]
 800025c:	79ba      	ldrb	r2, [r7, #6]
 800025e:	0092      	lsls	r2, r2, #2
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	4611      	mov	r1, r2
 8000266:	4a2d      	ldr	r2, [pc, #180]	; (800031c <MGPIO_voidSetPinDirection+0x160>)
 8000268:	440b      	add	r3, r1
 800026a:	6013      	str	r3, [r2, #0]
				break;
 800026c:	bf00      	nop
 800026e:	e04c      	b.n	800030a <MGPIO_voidSetPinDirection+0x14e>
	else if (copy_u8Pin >= 8 && copy_u8Pin < 16)
 8000270:	79bb      	ldrb	r3, [r7, #6]
 8000272:	2b07      	cmp	r3, #7
 8000274:	d949      	bls.n	800030a <MGPIO_voidSetPinDirection+0x14e>
 8000276:	79bb      	ldrb	r3, [r7, #6]
 8000278:	2b0f      	cmp	r3, #15
 800027a:	d846      	bhi.n	800030a <MGPIO_voidSetPinDirection+0x14e>
		switch (copy_u8Port)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d019      	beq.n	80002b6 <MGPIO_voidSetPinDirection+0xfa>
 8000282:	2b02      	cmp	r3, #2
 8000284:	d02c      	beq.n	80002e0 <MGPIO_voidSetPinDirection+0x124>
 8000286:	2b00      	cmp	r3, #0
 8000288:	d000      	beq.n	800028c <MGPIO_voidSetPinDirection+0xd0>
}
 800028a:	e03e      	b.n	800030a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOA->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 800028c:	4b21      	ldr	r3, [pc, #132]	; (8000314 <MGPIO_voidSetPinDirection+0x158>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	3a08      	subs	r2, #8
 8000294:	0092      	lsls	r2, r2, #2
 8000296:	210f      	movs	r1, #15
 8000298:	fa01 f202 	lsl.w	r2, r1, r2
 800029c:	43d2      	mvns	r2, r2
 800029e:	4013      	ands	r3, r2
 80002a0:	7bf9      	ldrb	r1, [r7, #15]
 80002a2:	79ba      	ldrb	r2, [r7, #6]
 80002a4:	3a08      	subs	r2, #8
 80002a6:	0092      	lsls	r2, r2, #2
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	4611      	mov	r1, r2
 80002ae:	4a19      	ldr	r2, [pc, #100]	; (8000314 <MGPIO_voidSetPinDirection+0x158>)
 80002b0:	440b      	add	r3, r1
 80002b2:	6053      	str	r3, [r2, #4]
				break;
 80002b4:	e029      	b.n	800030a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOB->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 80002b6:	4b18      	ldr	r3, [pc, #96]	; (8000318 <MGPIO_voidSetPinDirection+0x15c>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	79ba      	ldrb	r2, [r7, #6]
 80002bc:	3a08      	subs	r2, #8
 80002be:	0092      	lsls	r2, r2, #2
 80002c0:	210f      	movs	r1, #15
 80002c2:	fa01 f202 	lsl.w	r2, r1, r2
 80002c6:	43d2      	mvns	r2, r2
 80002c8:	4013      	ands	r3, r2
 80002ca:	7bf9      	ldrb	r1, [r7, #15]
 80002cc:	79ba      	ldrb	r2, [r7, #6]
 80002ce:	3a08      	subs	r2, #8
 80002d0:	0092      	lsls	r2, r2, #2
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <MGPIO_voidSetPinDirection+0x15c>)
 80002da:	440b      	add	r3, r1
 80002dc:	6053      	str	r3, [r2, #4]
				break;
 80002de:	e014      	b.n	800030a <MGPIO_voidSetPinDirection+0x14e>
				INS_FIELD(GPIOC->GPIO_CRH, 0b1111, ((copy_u8Pin - 8) * 4),
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MGPIO_voidSetPinDirection+0x160>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	3a08      	subs	r2, #8
 80002e8:	0092      	lsls	r2, r2, #2
 80002ea:	210f      	movs	r1, #15
 80002ec:	fa01 f202 	lsl.w	r2, r1, r2
 80002f0:	43d2      	mvns	r2, r2
 80002f2:	4013      	ands	r3, r2
 80002f4:	7bf9      	ldrb	r1, [r7, #15]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	3a08      	subs	r2, #8
 80002fa:	0092      	lsls	r2, r2, #2
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	4611      	mov	r1, r2
 8000302:	4a06      	ldr	r2, [pc, #24]	; (800031c <MGPIO_voidSetPinDirection+0x160>)
 8000304:	440b      	add	r3, r1
 8000306:	6053      	str	r3, [r2, #4]
				break;
 8000308:	bf00      	nop
}
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bc90      	pop	{r4, r7}
 8000312:	4770      	bx	lr
 8000314:	40010800 	.word	0x40010800
 8000318:	40010c00 	.word	0x40010c00
 800031c:	40011000 	.word	0x40011000

08000320 <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(GPIO_PORT copy_u8Port, u8 copy_u8Pin,
		GPIO_VALUE copy_u8Value)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
 800032a:	460b      	mov	r3, r1
 800032c:	71bb      	strb	r3, [r7, #6]
 800032e:	4613      	mov	r3, r2
 8000330:	717b      	strb	r3, [r7, #5]
	if (copy_u8Pin < 16)
 8000332:	79bb      	ldrb	r3, [r7, #6]
 8000334:	2b0f      	cmp	r3, #15
 8000336:	d83a      	bhi.n	80003ae <MGPIO_voidSetPinValue+0x8e>
	{

		if (copy_u8Value == GPIO_HIGH)
 8000338:	797b      	ldrb	r3, [r7, #5]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d11a      	bne.n	8000374 <MGPIO_voidSetPinValue+0x54>
		{
			switch (copy_u8Port)
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d00a      	beq.n	800035a <MGPIO_voidSetPinValue+0x3a>
 8000344:	2b02      	cmp	r3, #2
 8000346:	d00e      	beq.n	8000366 <MGPIO_voidSetPinValue+0x46>
 8000348:	2b00      	cmp	r3, #0
 800034a:	d000      	beq.n	800034e <MGPIO_voidSetPinValue+0x2e>
			}

		}

	}
}
 800034c:	e02f      	b.n	80003ae <MGPIO_voidSetPinValue+0x8e>
					GPIOA->GPIO_BSRR = 1 << copy_u8Pin; // make advantage of atomic set
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	2201      	movs	r2, #1
 8000352:	409a      	lsls	r2, r3
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MGPIO_voidSetPinValue+0x98>)
 8000356:	611a      	str	r2, [r3, #16]
					break;
 8000358:	e029      	b.n	80003ae <MGPIO_voidSetPinValue+0x8e>
					GPIOB->GPIO_BSRR = 1 << copy_u8Pin;
 800035a:	79bb      	ldrb	r3, [r7, #6]
 800035c:	2201      	movs	r2, #1
 800035e:	409a      	lsls	r2, r3
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MGPIO_voidSetPinValue+0x9c>)
 8000362:	611a      	str	r2, [r3, #16]
					break;
 8000364:	e023      	b.n	80003ae <MGPIO_voidSetPinValue+0x8e>
					GPIOC->GPIO_BSRR = 1 << copy_u8Pin;
 8000366:	79bb      	ldrb	r3, [r7, #6]
 8000368:	2201      	movs	r2, #1
 800036a:	409a      	lsls	r2, r3
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MGPIO_voidSetPinValue+0xa0>)
 800036e:	611a      	str	r2, [r3, #16]
					break;
 8000370:	bf00      	nop
 8000372:	e01c      	b.n	80003ae <MGPIO_voidSetPinValue+0x8e>
		else if (copy_u8Value == GPIO_LOW)
 8000374:	797b      	ldrb	r3, [r7, #5]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d119      	bne.n	80003ae <MGPIO_voidSetPinValue+0x8e>
			switch (copy_u8Port)
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d00a      	beq.n	8000396 <MGPIO_voidSetPinValue+0x76>
 8000380:	2b02      	cmp	r3, #2
 8000382:	d00e      	beq.n	80003a2 <MGPIO_voidSetPinValue+0x82>
 8000384:	2b00      	cmp	r3, #0
 8000386:	d000      	beq.n	800038a <MGPIO_voidSetPinValue+0x6a>
}
 8000388:	e011      	b.n	80003ae <MGPIO_voidSetPinValue+0x8e>
					GPIOA->GPIO_BRR = 1 << copy_u8Pin; // make advantage of atomic clear
 800038a:	79bb      	ldrb	r3, [r7, #6]
 800038c:	2201      	movs	r2, #1
 800038e:	409a      	lsls	r2, r3
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MGPIO_voidSetPinValue+0x98>)
 8000392:	615a      	str	r2, [r3, #20]
					break;
 8000394:	e00b      	b.n	80003ae <MGPIO_voidSetPinValue+0x8e>
					GPIOB->GPIO_BRR = 1 << copy_u8Pin;
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	2201      	movs	r2, #1
 800039a:	409a      	lsls	r2, r3
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <MGPIO_voidSetPinValue+0x9c>)
 800039e:	615a      	str	r2, [r3, #20]
					break;
 80003a0:	e005      	b.n	80003ae <MGPIO_voidSetPinValue+0x8e>
					GPIOC->GPIO_BRR = 1 << copy_u8Pin;
 80003a2:	79bb      	ldrb	r3, [r7, #6]
 80003a4:	2201      	movs	r2, #1
 80003a6:	409a      	lsls	r2, r3
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <MGPIO_voidSetPinValue+0xa0>)
 80003aa:	615a      	str	r2, [r3, #20]
					break;
 80003ac:	bf00      	nop
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40010800 	.word	0x40010800
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	40011000 	.word	0x40011000

080003c4 <MGPIO_u8GetPinValue>:

STATUS MGPIO_u8GetPinValue(GPIO_PORT copy_u8Port, u8 copy_u8Pin)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	460a      	mov	r2, r1
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	4613      	mov	r3, r2
 80003d2:	71bb      	strb	r3, [r7, #6]
	STATUS status = ZERO;
 80003d4:	2300      	movs	r3, #0
 80003d6:	73fb      	strb	r3, [r7, #15]
	if (copy_u8Pin < 16)
 80003d8:	79bb      	ldrb	r3, [r7, #6]
 80003da:	2b0f      	cmp	r3, #15
 80003dc:	d825      	bhi.n	800042a <MGPIO_u8GetPinValue+0x66>
	{
		switch (copy_u8Port)
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d00d      	beq.n	8000400 <MGPIO_u8GetPinValue+0x3c>
 80003e4:	2b02      	cmp	r3, #2
 80003e6:	d015      	beq.n	8000414 <MGPIO_u8GetPinValue+0x50>
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d120      	bne.n	800042e <MGPIO_u8GetPinValue+0x6a>
		{
			case GPIO_PORTA:
				status = GET_BIT(GPIOA->GPIO_IDR, copy_u8Pin);
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <MGPIO_u8GetPinValue+0x78>)
 80003ee:	689a      	ldr	r2, [r3, #8]
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	fa22 f303 	lsr.w	r3, r2, r3
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	73fb      	strb	r3, [r7, #15]
				break;
 80003fe:	e016      	b.n	800042e <MGPIO_u8GetPinValue+0x6a>
			case GPIO_PORTB:
				status = GET_BIT(GPIOB->GPIO_IDR, copy_u8Pin);
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MGPIO_u8GetPinValue+0x7c>)
 8000402:	689a      	ldr	r2, [r3, #8]
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	fa22 f303 	lsr.w	r3, r2, r3
 800040a:	b2db      	uxtb	r3, r3
 800040c:	f003 0301 	and.w	r3, r3, #1
 8000410:	73fb      	strb	r3, [r7, #15]
				break;
 8000412:	e00c      	b.n	800042e <MGPIO_u8GetPinValue+0x6a>

			case GPIO_PORTC:
				status = GET_BIT(GPIOC->GPIO_IDR, copy_u8Pin);
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MGPIO_u8GetPinValue+0x80>)
 8000416:	689a      	ldr	r2, [r3, #8]
 8000418:	79bb      	ldrb	r3, [r7, #6]
 800041a:	fa22 f303 	lsr.w	r3, r2, r3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	73fb      	strb	r3, [r7, #15]
				break;
 8000426:	bf00      	nop
 8000428:	e001      	b.n	800042e <MGPIO_u8GetPinValue+0x6a>
		}

	}
	else
	{
		status = ERROR;
 800042a:	2302      	movs	r3, #2
 800042c:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800042e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000430:	4618      	mov	r0, r3
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40010800 	.word	0x40010800
 8000440:	40010c00 	.word	0x40010c00
 8000444:	40011000 	.word	0x40011000

08000448 <MGPIO_u16GetPort>:

STATUS MGPIO_u16GetPort(GPIO_PORT copy_u8Port, u16 *ptr_value)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	6039      	str	r1, [r7, #0]
 8000452:	71fb      	strb	r3, [r7, #7]
	STATUS status = ZERO;
 8000454:	2300      	movs	r3, #0
 8000456:	73fb      	strb	r3, [r7, #15]
	switch (copy_u8Port)
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d00b      	beq.n	8000476 <MGPIO_u16GetPort+0x2e>
 800045e:	2b02      	cmp	r3, #2
 8000460:	d011      	beq.n	8000486 <MGPIO_u16GetPort+0x3e>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d117      	bne.n	8000496 <MGPIO_u16GetPort+0x4e>
	{
		case GPIO_PORTA:
			*ptr_value = GPIOA->GPIO_IDR;
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MGPIO_u16GetPort+0x5c>)
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	b29a      	uxth	r2, r3
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	801a      	strh	r2, [r3, #0]
			status = ONE;
 8000470:	2301      	movs	r3, #1
 8000472:	73fb      	strb	r3, [r7, #15]
			break;
 8000474:	e00f      	b.n	8000496 <MGPIO_u16GetPort+0x4e>
		case GPIO_PORTB:
			*ptr_value = GPIOB->GPIO_IDR;
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MGPIO_u16GetPort+0x60>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	b29a      	uxth	r2, r3
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	801a      	strh	r2, [r3, #0]
			status = ONE;
 8000480:	2301      	movs	r3, #1
 8000482:	73fb      	strb	r3, [r7, #15]
			break;
 8000484:	e007      	b.n	8000496 <MGPIO_u16GetPort+0x4e>

		case GPIO_PORTC:
			*ptr_value = GPIOC->GPIO_IDR;
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MGPIO_u16GetPort+0x64>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	b29a      	uxth	r2, r3
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	801a      	strh	r2, [r3, #0]
			status = ONE;
 8000490:	2301      	movs	r3, #1
 8000492:	73fb      	strb	r3, [r7, #15]
			break;
 8000494:	bf00      	nop
	}
	return status;
 8000496:	7bfb      	ldrb	r3, [r7, #15]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40010800 	.word	0x40010800
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	40011000 	.word	0x40011000

080004b0 <MGPIO_voidWriteField>:

}

void MGPIO_voidWriteField(GPIO_PORT copy_u8Port, u16 copy_u16Mask,
		u16 copy_u16Value)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
 80004ba:	460b      	mov	r3, r1
 80004bc:	80bb      	strh	r3, [r7, #4]
 80004be:	4613      	mov	r3, r2
 80004c0:	807b      	strh	r3, [r7, #2]

	u16 local_value_High = copy_u16Mask & copy_u16Value;
 80004c2:	88ba      	ldrh	r2, [r7, #4]
 80004c4:	887b      	ldrh	r3, [r7, #2]
 80004c6:	4013      	ands	r3, r2
 80004c8:	81fb      	strh	r3, [r7, #14]
	u16 local_value_Low = copy_u16Mask & (~copy_u16Value);
 80004ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004ce:	43db      	mvns	r3, r3
 80004d0:	b21a      	sxth	r2, r3
 80004d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004d6:	4013      	ands	r3, r2
 80004d8:	b21b      	sxth	r3, r3
 80004da:	81bb      	strh	r3, [r7, #12]

	switch (copy_u8Port)
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d00b      	beq.n	80004fa <MGPIO_voidWriteField+0x4a>
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d010      	beq.n	8000508 <MGPIO_voidWriteField+0x58>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d000      	beq.n	80004ec <MGPIO_voidWriteField+0x3c>
		case GPIO_PORTC:
			GPIOC->GPIO_BSRR = local_value_High;
			GPIOC->GPIO_BRR = local_value_Low;
			break;
	}
}
 80004ea:	e014      	b.n	8000516 <MGPIO_voidWriteField+0x66>
			GPIOA->GPIO_BSRR = local_value_High;
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <MGPIO_voidWriteField+0x70>)
 80004ee:	89fb      	ldrh	r3, [r7, #14]
 80004f0:	6113      	str	r3, [r2, #16]
			GPIOA->GPIO_BRR = local_value_Low;
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <MGPIO_voidWriteField+0x70>)
 80004f4:	89bb      	ldrh	r3, [r7, #12]
 80004f6:	6153      	str	r3, [r2, #20]
			break;
 80004f8:	e00d      	b.n	8000516 <MGPIO_voidWriteField+0x66>
			GPIOB->GPIO_BSRR = local_value_High;
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <MGPIO_voidWriteField+0x74>)
 80004fc:	89fb      	ldrh	r3, [r7, #14]
 80004fe:	6113      	str	r3, [r2, #16]
			GPIOB->GPIO_BRR = local_value_Low;
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <MGPIO_voidWriteField+0x74>)
 8000502:	89bb      	ldrh	r3, [r7, #12]
 8000504:	6153      	str	r3, [r2, #20]
			break;
 8000506:	e006      	b.n	8000516 <MGPIO_voidWriteField+0x66>
			GPIOC->GPIO_BSRR = local_value_High;
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <MGPIO_voidWriteField+0x78>)
 800050a:	89fb      	ldrh	r3, [r7, #14]
 800050c:	6113      	str	r3, [r2, #16]
			GPIOC->GPIO_BRR = local_value_Low;
 800050e:	4a06      	ldr	r2, [pc, #24]	; (8000528 <MGPIO_voidWriteField+0x78>)
 8000510:	89bb      	ldrh	r3, [r7, #12]
 8000512:	6153      	str	r3, [r2, #20]
			break;
 8000514:	bf00      	nop
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40010800 	.word	0x40010800
 8000524:	40010c00 	.word	0x40010c00
 8000528:	40011000 	.word	0x40011000

0800052c <HLCD_voidInit>:

/************************************************************************
 initialize the LCD (this order specified in the data sheet
 ************************************************************************/
void HLCD_voidInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

	MSYSTICK_voidDelay_MS(LCD_INITIALIZATION_DELAY);
 8000530:	201e      	movs	r0, #30
 8000532:	f000 fb05 	bl	8000b40 <MSYSTICK_voidDelay_MS>

	// this sequence is according to data sheet
	HLCD_voidSendCommand(LCD_COMMAND_FUNCTION_SET);
 8000536:	2038      	movs	r0, #56	; 0x38
 8000538:	f000 f80b 	bl	8000552 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(LCD_COMMAND_DISPLAY_CONTROL);
 800053c:	200c      	movs	r0, #12
 800053e:	f000 f808 	bl	8000552 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(LCD_COMMAND_CLEAR_DISPLAY);
 8000542:	2001      	movs	r0, #1
 8000544:	f000 f805 	bl	8000552 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(LCD_COMMAND_ENTRY_SET);
 8000548:	2006      	movs	r0, #6
 800054a:	f000 f802 	bl	8000552 <HLCD_voidSendCommand>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}

08000552 <HLCD_voidSendCommand>:
 4- the pulse width for E signal is at least 230ns
 5- minimum E signal clock cycle is 500ns which means mx frequency is 2MHz
 6- max time for falling and rising time is 20ns
 ************************************************************************/
void HLCD_voidSendCommand(u8 copy_u8Command)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
 8000558:	4603      	mov	r3, r0
 800055a:	71fb      	strb	r3, [r7, #7]

	// choose the type of delay according to the configuration
#if LCD_WAITING_TYPE == LCD_DELAY_FUN
	MSYSTICK_voidDelay_MS(LCD_SLOW_COMMAND_DELAY);
#elif	LCD_WAITING_TYPE == LCD_WAIT_FLAG
	while (HLCD_u8GetFlag());
 800055c:	bf00      	nop
 800055e:	f000 f93d 	bl	80007dc <HLCD_u8GetFlag>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1fa      	bne.n	800055e <HLCD_voidSendCommand+0xc>
#endif

	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_LOW); //select instruction register
 8000568:	2200      	movs	r2, #0
 800056a:	2100      	movs	r1, #0
 800056c:	2001      	movs	r0, #1
 800056e:	f7ff fed7 	bl	8000320 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_LOW); //write mode
 8000572:	2200      	movs	r2, #0
 8000574:	2101      	movs	r1, #1
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff fed2 	bl	8000320 <MGPIO_voidSetPinValue>
	/*when writing at least 40ns between these two commands*/
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH); // E rising edge
 800057c:	2201      	movs	r2, #1
 800057e:	2105      	movs	r1, #5
 8000580:	2001      	movs	r0, #1
 8000582:	f7ff fecd 	bl	8000320 <MGPIO_voidSetPinValue>

	//MSYSTICK_voidDelay_MS(1);

	MGPIO_voidWriteField(LCD_DATA_PORT, GPIO_LOWER_BYTE_MASK, copy_u8Command);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	b29b      	uxth	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	21ff      	movs	r1, #255	; 0xff
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ff8e 	bl	80004b0 <MGPIO_voidWriteField>
	//MSYSTICK_voidDelay_MS(1);
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW); // E falling edge
 8000594:	2200      	movs	r2, #0
 8000596:	2105      	movs	r1, #5
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff fec1 	bl	8000320 <MGPIO_voidSetPinValue>
	/* data must be retained after the falling edge for at least 10nsec */

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <HLCD_voidSendData>:

/************************************************************************
 send Data to LCD
 ************************************************************************/
void HLCD_voidSendData(u8 copy_u8Char)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	4603      	mov	r3, r0
 80005ae:	71fb      	strb	r3, [r7, #7]

	// choose the type of delay according to the configuration
#if LCD_WAITING_TYPE == LCD_DELAY_FUN
	MSYSTICK_voidDelay_MS(LCD_SLOW_COMMAND_DELAY);
#elif	LCD_WAITING_TYPE == LCD_WAIT_FLAG
	while (HLCD_u8GetFlag());
 80005b0:	bf00      	nop
 80005b2:	f000 f913 	bl	80007dc <HLCD_u8GetFlag>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1fa      	bne.n	80005b2 <HLCD_voidSendData+0xc>
#endif

	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_HIGH); //select data register
 80005bc:	2201      	movs	r2, #1
 80005be:	2100      	movs	r1, #0
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff fead 	bl	8000320 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_LOW); //	write mode
 80005c6:	2200      	movs	r2, #0
 80005c8:	2101      	movs	r1, #1
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff fea8 	bl	8000320 <MGPIO_voidSetPinValue>
	/*when writing at least 40ns between these two commands*/
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH); // E rising edge
 80005d0:	2201      	movs	r2, #1
 80005d2:	2105      	movs	r1, #5
 80005d4:	2001      	movs	r0, #1
 80005d6:	f7ff fea3 	bl	8000320 <MGPIO_voidSetPinValue>

	//MSYSTICK_voidDelay_MS(1);

	MGPIO_voidWriteField(LCD_DATA_PORT, GPIO_LOWER_BYTE_MASK, copy_u8Char);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	21ff      	movs	r1, #255	; 0xff
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ff64 	bl	80004b0 <MGPIO_voidWriteField>
	//MSYSTICK_voidDelay_MS(1);
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW); // E falling edge
 80005e8:	2200      	movs	r2, #0
 80005ea:	2105      	movs	r1, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	f7ff fe97 	bl	8000320 <MGPIO_voidSetPinValue>

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <HLCD_voidDisplayString>:

/************************************************************************
 display String
 ************************************************************************/
void HLCD_voidDisplayString(char *copy_pu8String)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
	while (*copy_pu8String != '\0')
 8000602:	e006      	b.n	8000612 <HLCD_voidDisplayString+0x18>
	{
		HLCD_voidSendData(*copy_pu8String++);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	607a      	str	r2, [r7, #4]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffca 	bl	80005a6 <HLCD_voidSendData>
	while (*copy_pu8String != '\0')
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f4      	bne.n	8000604 <HLCD_voidDisplayString+0xa>
	}
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <HLCD_voidDisplayNumber>:

/************************************************************************
 display number
 ************************************************************************/
void HLCD_voidDisplayNumber(s32 copy_s32Number)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	s32 temp = 5;
 800062c:	2305      	movs	r3, #5
 800062e:	60fb      	str	r3, [r7, #12]
	//check if the number is negative
	if (copy_s32Number < 0)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	da05      	bge.n	8000642 <HLCD_voidDisplayNumber+0x1e>
	{
		HLCD_voidSendData('-');
 8000636:	202d      	movs	r0, #45	; 0x2d
 8000638:	f7ff ffb5 	bl	80005a6 <HLCD_voidSendData>
		copy_s32Number *= -1;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	425b      	negs	r3, r3
 8000640:	607b      	str	r3, [r7, #4]
	}

	if (copy_s32Number == 0)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d11f      	bne.n	8000688 <HLCD_voidDisplayNumber+0x64>
	{
		HLCD_voidSendData('0');
 8000648:	2030      	movs	r0, #48	; 0x30
 800064a:	f7ff ffac 	bl	80005a6 <HLCD_voidSendData>
		return;
 800064e:	e03c      	b.n	80006ca <HLCD_voidDisplayNumber+0xa6>
	}

	//cascade numbers in reverse order
	while (copy_s32Number != 0)
	{
		temp = temp * 10 + copy_s32Number % 10;
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4618      	mov	r0, r3
 800065c:	6879      	ldr	r1, [r7, #4]
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HLCD_voidDisplayNumber+0xac>)
 8000660:	fb83 2301 	smull	r2, r3, r3, r1
 8000664:	109a      	asrs	r2, r3, #2
 8000666:	17cb      	asrs	r3, r1, #31
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	1883      	adds	r3, r0, r2
 8000676:	60fb      	str	r3, [r7, #12]
		copy_s32Number /= 10;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <HLCD_voidDisplayNumber+0xac>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	1092      	asrs	r2, r2, #2
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	607b      	str	r3, [r7, #4]
	while (copy_s32Number != 0)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1e0      	bne.n	8000650 <HLCD_voidDisplayNumber+0x2c>
	}
	//display them one by one
	while (temp != 5)
 800068e:	e019      	b.n	80006c4 <HLCD_voidDisplayNumber+0xa0>
	{
		HLCD_voidSendData(temp % 10 + '0');
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HLCD_voidDisplayNumber+0xac>)
 8000694:	fb83 1302 	smull	r1, r3, r3, r2
 8000698:	1099      	asrs	r1, r3, #2
 800069a:	17d3      	asrs	r3, r2, #31
 800069c:	1ac9      	subs	r1, r1, r3
 800069e:	460b      	mov	r3, r1
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	440b      	add	r3, r1
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	1ad1      	subs	r1, r2, r3
 80006a8:	b2cb      	uxtb	r3, r1
 80006aa:	3330      	adds	r3, #48	; 0x30
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff79 	bl	80005a6 <HLCD_voidSendData>
		temp /= 10;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HLCD_voidDisplayNumber+0xac>)
 80006b8:	fb82 1203 	smull	r1, r2, r2, r3
 80006bc:	1092      	asrs	r2, r2, #2
 80006be:	17db      	asrs	r3, r3, #31
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	60fb      	str	r3, [r7, #12]
	while (temp != 5)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d1e2      	bne.n	8000690 <HLCD_voidDisplayNumber+0x6c>
	}

}
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	66666667 	.word	0x66666667

080006d4 <HLCD_voidClearDisplay>:

/************************************************************************
 send clear screen command
 ************************************************************************/
void HLCD_voidClearDisplay(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	HLCD_voidSendCommand(LCD_COMMAND_CLEAR_DISPLAY);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff3a 	bl	8000552 <HLCD_voidSendCommand>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <HLCD_voidGoToPos>:

/************************************************************************
 specify the address for the position at DDRAM
 ************************************************************************/
void HLCD_voidGoToPos(u8 copy_u8RowNum, u8 copy_u8ColNum)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	4603      	mov	r3, r0
 80006ea:	460a      	mov	r2, r1
 80006ec:	71fb      	strb	r3, [r7, #7]
 80006ee:	4613      	mov	r3, r2
 80006f0:	71bb      	strb	r3, [r7, #6]
	u8 value = 0x40 * copy_u8RowNum + copy_u8ColNum + 0b10000000;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	019b      	lsls	r3, r3, #6
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	4413      	add	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	3b80      	subs	r3, #128	; 0x80
 8000700:	73fb      	strb	r3, [r7, #15]
	HLCD_voidSendCommand(value);
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff24 	bl	8000552 <HLCD_voidSendCommand>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HLCD_voidSendSpecialCharacter>:
 send the custom pattern to n location from the 8 locations at CGRAM
 then display it
 ************************************************************************/
void HLCD_voidSendSpecialCharacter(u8 *copy_pu8charArr, u8 copy_u8patternNum,
		u8 copy_u8LineNum, u8 copy_ColNum)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	4608      	mov	r0, r1
 800071c:	4611      	mov	r1, r2
 800071e:	461a      	mov	r2, r3
 8000720:	4603      	mov	r3, r0
 8000722:	70fb      	strb	r3, [r7, #3]
 8000724:	460b      	mov	r3, r1
 8000726:	70bb      	strb	r3, [r7, #2]
 8000728:	4613      	mov	r3, r2
 800072a:	707b      	strb	r3, [r7, #1]
	/* set address of first byte of the pattern at pattern number n*/
	HLCD_voidSendCommand(0x40 + 8 * copy_u8patternNum);
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	3308      	adds	r3, #8
 8000730:	b2db      	uxtb	r3, r3
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff0b 	bl	8000552 <HLCD_voidSendCommand>

	/* send the pattern  data bytes one by one */
	for (u8 i = 0; i < 8; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e00c      	b.n	800075c <HLCD_voidSendSpecialCharacter+0x4a>
	{
		HLCD_voidSendData(*copy_pu8charArr++);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	1c5a      	adds	r2, r3, #1
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff2b 	bl	80005a6 <HLCD_voidSendData>
		MSYSTICK_voidDelay_uS(45);
 8000750:	202d      	movs	r0, #45	; 0x2d
 8000752:	f000 fa2d 	bl	8000bb0 <MSYSTICK_voidDelay_uS>
	for (u8 i = 0; i < 8; i++)
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	3301      	adds	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9ef      	bls.n	8000742 <HLCD_voidSendSpecialCharacter+0x30>
	}

	/* set the address in the DDRAM instead of GCRAM */
	HLCD_voidGoToPos(copy_u8LineNum, copy_ColNum);
 8000762:	787a      	ldrb	r2, [r7, #1]
 8000764:	78bb      	ldrb	r3, [r7, #2]
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffba 	bl	80006e2 <HLCD_voidGoToPos>

	HLCD_voidSendData(copy_u8patternNum);
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff18 	bl	80005a6 <HLCD_voidSendData>

}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HLCD_voidSetSpecialCharacterPattern>:
 if we want to display the character we send the block number with
 HLCD_voidSendData() command
 ************************************************************************/
void HLCD_voidSetSpecialCharacterPattern(u8 *copy_pu8charArr,
		u8 copy_u8patternNum)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b084      	sub	sp, #16
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]

	// save the current address of DDRAM
	u8 address = HLCD_u8GetDDRAMAddress();
 800078a:	f000 f859 	bl	8000840 <HLCD_u8GetDDRAMAddress>
 800078e:	4603      	mov	r3, r0
 8000790:	73bb      	strb	r3, [r7, #14]
	/* set address of first byte in the pattern of pattern number n*/
	HLCD_voidSendCommand(0x40 + 8 * copy_u8patternNum);
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	3308      	adds	r3, #8
 8000796:	b2db      	uxtb	r3, r3
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fed8 	bl	8000552 <HLCD_voidSendCommand>

	/* send the pattern  data bytes one by one */
	for (u8 i = 0; i < 8; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e00c      	b.n	80007c2 <HLCD_voidSetSpecialCharacterPattern+0x44>
	{
		HLCD_voidSendData(*copy_pu8charArr++);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fef8 	bl	80005a6 <HLCD_voidSendData>
		MSYSTICK_voidDelay_uS(45);
 80007b6:	202d      	movs	r0, #45	; 0x2d
 80007b8:	f000 f9fa 	bl	8000bb0 <MSYSTICK_voidDelay_uS>
	for (u8 i = 0; i < 8; i++)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	3301      	adds	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	2b07      	cmp	r3, #7
 80007c6:	d9ef      	bls.n	80007a8 <HLCD_voidSetSpecialCharacterPattern+0x2a>

	}

	// set DDRAM address again from where we begin
	HLCD_voidSendCommand(0x80 + address);
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	3b80      	subs	r3, #128	; 0x80
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff febf 	bl	8000552 <HLCD_voidSendCommand>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <HLCD_u8GetFlag>:
 5- read data and extract the flag
 6- E falling edge
 7- make the port output again
 *****************************************************************************/
u8 HLCD_u8GetFlag(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af02      	add	r7, sp, #8

	u8 value;

	MGPIO_voidSetPortDirection(LCD_DATA_PORT, 0, 7, GPIO_MODE_INPUT,
 80007e2:	2306      	movs	r3, #6
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2300      	movs	r3, #0
 80007e8:	2207      	movs	r2, #7
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff fcbf 	bl	8000170 <MGPIO_voidSetPortDirection>
			GPIO_INPUT_CNFG_PUSH_PULL);

	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_LOW); //select instruction reg
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff fd92 	bl	8000320 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_HIGH); //read mode
 80007fc:	2201      	movs	r2, #1
 80007fe:	2101      	movs	r1, #1
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff fd8d 	bl	8000320 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH); //E rising edge
 8000806:	2201      	movs	r2, #1
 8000808:	2105      	movs	r1, #5
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fd88 	bl	8000320 <MGPIO_voidSetPinValue>
	/* data output delay time is at least 120ns*/
	value = MGPIO_u8GetPinValue(LCD_DATA_PORT, 7); // read data and extract the flag(bit 7)
 8000810:	2107      	movs	r1, #7
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fdd6 	bl	80003c4 <MGPIO_u8GetPinValue>
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]

	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW); //E falling edge
 800081c:	2200      	movs	r2, #0
 800081e:	2105      	movs	r1, #5
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fd7d 	bl	8000320 <MGPIO_voidSetPinValue>

	MGPIO_voidSetPortDirection(GPIO_PORTA, 0, 7, GPIO_MODE_OUTPUT_2_MHZ,
 8000826:	2300      	movs	r3, #0
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2302      	movs	r3, #2
 800082c:	2207      	movs	r2, #7
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fc9d 	bl	8000170 <MGPIO_voidSetPortDirection>
			GPIO_OUTPUT_CNFG_GP_PP);

	return value;
 8000836:	79fb      	ldrb	r3, [r7, #7]

}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <HLCD_u8GetDDRAMAddress>:

/****************************************************************
 read address of the DDRAM
 ***************************************************************/
static u8 HLCD_u8GetDDRAMAddress(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af02      	add	r7, sp, #8

	u16 address;
	u8 value;

	MGPIO_voidSetPortDirection(LCD_DATA_PORT, 0, 7, GPIO_MODE_INPUT,
 8000846:	2306      	movs	r3, #6
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2300      	movs	r3, #0
 800084c:	2207      	movs	r2, #7
 800084e:	2100      	movs	r1, #0
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fc8d 	bl	8000170 <MGPIO_voidSetPortDirection>
			GPIO_INPUT_CNFG_PUSH_PULL);

	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_LOW); //select instruction reg
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fd60 	bl	8000320 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_HIGH); //read mode
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff fd5b 	bl	8000320 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH); //E rising edge
 800086a:	2201      	movs	r2, #1
 800086c:	2105      	movs	r1, #5
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff fd56 	bl	8000320 <MGPIO_voidSetPinValue>
	/* data output delay time is at least 120ns*/

	MGPIO_u16GetPort(LCD_DATA_PORT, &address);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff fde5 	bl	8000448 <MGPIO_u16GetPort>
	value = address & (0x007F);
 800087e:	88bb      	ldrh	r3, [r7, #4]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000886:	71fb      	strb	r3, [r7, #7]

	MGPIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW); //E falling edge
 8000888:	2200      	movs	r2, #0
 800088a:	2105      	movs	r1, #5
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fd47 	bl	8000320 <MGPIO_voidSetPinValue>

	MGPIO_voidSetPortDirection(GPIO_PORTA, 0, 7, GPIO_MODE_OUTPUT_2_MHZ,
 8000892:	2300      	movs	r3, #0
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2302      	movs	r3, #2
 8000898:	2207      	movs	r2, #7
 800089a:	2100      	movs	r1, #0
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fc67 	bl	8000170 <MGPIO_voidSetPortDirection>
			GPIO_OUTPUT_CNFG_GP_PP);

	return value;
 80008a2:	79fb      	ldrb	r3, [r7, #7]

}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MRCC_voidInit>:
u32 RCC_AHB_Frequency;
u32 RCC_APB1_Frequency;
u32 RCC_APB2_Frequency;

void MRCC_voidInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	/* assign the system clock global variable*/
	RCC_F_CPU = RCC_SYSTEM_CLOCK;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MRCC_voidInit+0x48>)
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <MRCC_voidInit+0x4c>)
 80008b4:	601a      	str	r2, [r3, #0]

	/* assign the AHB frequency global variable*/
#if RCC_AHB_BUS_PRESCALER <=10
	RCC_AHB_Frequency = RCC_F_CPU >> (RCC_AHB_BUS_PRESCALER - 7);
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MRCC_voidInit+0x48>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <MRCC_voidInit+0x50>)
 80008bc:	6013      	str	r3, [r2, #0]
#else
	RCC_AHB_Frequency = RCC_F_CPU>>(RCC_AHB_BUS_PRESCALER-7+1);
#endif

	/* assign the APB1 & APB2 frequency global variable */
	RCC_APB1_Frequency = RCC_F_CPU >> (RCC_APB1_BUS_PRESCALER - 3);
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MRCC_voidInit+0x48>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	085b      	lsrs	r3, r3, #1
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <MRCC_voidInit+0x54>)
 80008c6:	6013      	str	r3, [r2, #0]
	RCC_APB2_Frequency = RCC_F_CPU >> (RCC_APB2_BUS_PRESCALER - 3);
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MRCC_voidInit+0x48>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <MRCC_voidInit+0x58>)
 80008d0:	6013      	str	r3, [r2, #0]

	MRCC_voidSetBusClocks(RCC_AHB_BUS_PRESCALER, RCC_APB1_BUS_PRESCALER,
 80008d2:	2204      	movs	r2, #4
 80008d4:	2104      	movs	r1, #4
 80008d6:	2007      	movs	r0, #7
 80008d8:	f000 f898 	bl	8000a0c <MRCC_voidSetBusClocks>
	SET_BIT(RCC->RCC_CFGR, 16); //PLLSRC
	INS_FIELD(RCC->RCC_CFGR, 0x1111, 18, (RCC_PLL_MUL_FACTOR-2));

#endif

	MRCC_voidEnableClockSource(RCC_SYSTEM_CLOCK_SOURCE, RCC_STATUS_ON);
 80008dc:	2101      	movs	r1, #1
 80008de:	2011      	movs	r0, #17
 80008e0:	f000 f872 	bl	80009c8 <MRCC_voidEnableClockSource>

	MRCC_u8CheckClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80008e4:	2011      	movs	r0, #17
 80008e6:	f000 f80f 	bl	8000908 <MRCC_u8CheckClockSource>

	MRCC_voidSetClockSource(RCC_SYSTEM_CLOCK_SOURCE);
 80008ea:	2011      	movs	r0, #17
 80008ec:	f000 f840 	bl	8000970 <MRCC_voidSetClockSource>

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000034 	.word	0x20000034
 80008f8:	007a1200 	.word	0x007a1200
 80008fc:	2000003c 	.word	0x2000003c
 8000900:	20000038 	.word	0x20000038
 8000904:	20000040 	.word	0x20000040

08000908 <MRCC_u8CheckClockSource>:

u8 MRCC_u8CheckClockSource(RCC_CLOCK_SOURCE copy_u8CLK)
{
 8000908:	b480      	push	{r7}
 800090a:	b087      	sub	sp, #28
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	u32 max_wait_time = 50000;
 8000912:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000916:	60fb      	str	r3, [r7, #12]
	u32 counter = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
	u8 state = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	74fb      	strb	r3, [r7, #19]

	if ((copy_u8CLK != RCC_HSI) && (copy_u8CLK != RCC_HSE)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d011      	beq.n	800094a <MRCC_u8CheckClockSource+0x42>
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b11      	cmp	r3, #17
 800092a:	d00e      	beq.n	800094a <MRCC_u8CheckClockSource+0x42>
			&& (copy_u8CLK != RCC_PLL)) state = 0;
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b19      	cmp	r3, #25
 8000930:	d00b      	beq.n	800094a <MRCC_u8CheckClockSource+0x42>
 8000932:	2300      	movs	r3, #0
 8000934:	74fb      	strb	r3, [r7, #19]
 8000936:	e013      	b.n	8000960 <MRCC_u8CheckClockSource+0x58>
	else
	{
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
		{
			counter++;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	3301      	adds	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
			state = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	74fb      	strb	r3, [r7, #19]
			if (counter == max_wait_time) break;
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	429a      	cmp	r2, r3
 8000948:	d009      	beq.n	800095e <MRCC_u8CheckClockSource+0x56>
		while (!GET_BIT(RCC->RCC_CR, copy_u8CLK))
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MRCC_u8CheckClockSource+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	fa22 f303 	lsr.w	r3, r2, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0ed      	beq.n	8000938 <MRCC_u8CheckClockSource+0x30>
 800095c:	e000      	b.n	8000960 <MRCC_u8CheckClockSource+0x58>
			if (counter == max_wait_time) break;
 800095e:	bf00      	nop
		}
	}
	return state;
 8000960:	7cfb      	ldrb	r3, [r7, #19]
}
 8000962:	4618      	mov	r0, r3
 8000964:	371c      	adds	r7, #28
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000

08000970 <MRCC_voidSetClockSource>:

void MRCC_voidSetClockSource(RCC_CLOCK_SOURCE copy_u8Source)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8Source)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b11      	cmp	r3, #17
 800097e:	d00b      	beq.n	8000998 <MRCC_voidSetClockSource+0x28>
 8000980:	2b19      	cmp	r3, #25
 8000982:	d011      	beq.n	80009a8 <MRCC_voidSetClockSource+0x38>
 8000984:	2b01      	cmp	r3, #1
 8000986:	d000      	beq.n	800098a <MRCC_voidSetClockSource+0x1a>
			break;
		case RCC_PLL:
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
			break;
	}
}
 8000988:	e016      	b.n	80009b8 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 0);
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MRCC_voidSetClockSource+0x54>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <MRCC_voidSetClockSource+0x54>)
 8000990:	f023 0303 	bic.w	r3, r3, #3
 8000994:	6053      	str	r3, [r2, #4]
			break;
 8000996:	e00f      	b.n	80009b8 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 1);
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MRCC_voidSetClockSource+0x54>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f023 0303 	bic.w	r3, r3, #3
 80009a0:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <MRCC_voidSetClockSource+0x54>)
 80009a2:	3301      	adds	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
			break;
 80009a6:	e007      	b.n	80009b8 <MRCC_voidSetClockSource+0x48>
			INS_FIELD((RCC->RCC_CFGR), 0b11, 0, 2);
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MRCC_voidSetClockSource+0x54>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f023 0303 	bic.w	r3, r3, #3
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <MRCC_voidSetClockSource+0x54>)
 80009b2:	3302      	adds	r3, #2
 80009b4:	6053      	str	r3, [r2, #4]
			break;
 80009b6:	bf00      	nop
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <MRCC_voidEnableClockSource>:

void MRCC_voidEnableClockSource(RCC_CLOCK_SOURCE copy_u8ClockSource,
		RCC_STATES copy_u8state)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	4613      	mov	r3, r2
 80009d6:	71bb      	strb	r3, [r7, #6]
	// the insert function offset value is determined with the bus variable
	// which is specified in the interface file
	INS_BIT(RCC->RCC_CR, (copy_u8ClockSource - 1), copy_u8state); // source_ON bit
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MRCC_voidEnableClockSource+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	3a01      	subs	r2, #1
 80009e0:	2101      	movs	r1, #1
 80009e2:	fa01 f202 	lsl.w	r2, r1, r2
 80009e6:	43d2      	mvns	r2, r2
 80009e8:	4013      	ands	r3, r2
 80009ea:	79b9      	ldrb	r1, [r7, #6]
 80009ec:	79fa      	ldrb	r2, [r7, #7]
 80009ee:	3a01      	subs	r2, #1
 80009f0:	fa01 f202 	lsl.w	r2, r1, r2
 80009f4:	4611      	mov	r1, r2
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <MRCC_voidEnableClockSource+0x40>)
 80009f8:	430b      	orrs	r3, r1
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <MRCC_voidSetBusClocks>:

void MRCC_voidSetBusClocks(RCC_AHB_PRESCALER copy_AHB,
		RCC_APB_PRESCALER copy_APB1, RCC_APB_PRESCALER copy_APB2)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	460b      	mov	r3, r1
 8000a18:	71bb      	strb	r3, [r7, #6]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	717b      	strb	r3, [r7, #5]
	// AHB prescaler is different 4-bits wide

	INS_FIELD(RCC->RCC_CFGR, 0b1111, 4, copy_AHB);
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MRCC_voidSetBusClocks+0x58>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <MRCC_voidSetBusClocks+0x58>)
 8000a2e:	440b      	add	r3, r1
 8000a30:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 8, copy_APB1);
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MRCC_voidSetBusClocks+0x58>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a3a:	79ba      	ldrb	r2, [r7, #6]
 8000a3c:	0212      	lsls	r2, r2, #8
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <MRCC_voidSetBusClocks+0x58>)
 8000a42:	440b      	add	r3, r1
 8000a44:	6053      	str	r3, [r2, #4]
	INS_FIELD(RCC->RCC_CFGR, 0b111, 11, copy_APB2);
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MRCC_voidSetBusClocks+0x58>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a4e:	797a      	ldrb	r2, [r7, #5]
 8000a50:	02d2      	lsls	r2, r2, #11
 8000a52:	4611      	mov	r1, r2
 8000a54:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <MRCC_voidSetBusClocks+0x58>)
 8000a56:	440b      	add	r3, r1
 8000a58:	6053      	str	r3, [r2, #4]

}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	40021000 	.word	0x40021000

08000a68 <MRCC_voidSetPeripheralClock>:

void MRCC_voidSetPeripheralClock(RCC_BUS copy_u8Bus, u8 copy_u8PeripheralNum,
		RCC_STATES copy_periph_status)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	460b      	mov	r3, r1
 8000a74:	71bb      	strb	r3, [r7, #6]
 8000a76:	4613      	mov	r3, r2
 8000a78:	717b      	strb	r3, [r7, #5]
	// dis/enable the desired peripheral on the specified bus
	// the insert function ofset value is determened with the bus variable
	// which is specified in the interface file
	if (copy_u8Bus == RCC_AHB_BUS)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d110      	bne.n	8000aa2 <MRCC_voidSetPeripheralClock+0x3a>
	{
		INS_BIT(RCC->RCC_AHBENR, copy_u8PeripheralNum, copy_periph_status);
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MRCC_voidSetPeripheralClock+0x94>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	79ba      	ldrb	r2, [r7, #6]
 8000a86:	2101      	movs	r1, #1
 8000a88:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8c:	43d2      	mvns	r2, r2
 8000a8e:	4013      	ands	r3, r2
 8000a90:	7979      	ldrb	r1, [r7, #5]
 8000a92:	79ba      	ldrb	r2, [r7, #6]
 8000a94:	fa01 f202 	lsl.w	r2, r1, r2
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MRCC_voidSetPeripheralClock+0x94>)
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	6153      	str	r3, [r2, #20]
	}
	else if (copy_u8Bus == RCC_APB2_BUS)
	{
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
	}
}
 8000aa0:	e026      	b.n	8000af0 <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB1_BUS)
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b08      	cmp	r3, #8
 8000aa6:	d110      	bne.n	8000aca <MRCC_voidSetPeripheralClock+0x62>
		INS_BIT(RCC->RCC_APB1ENR, copy_u8PeripheralNum, copy_periph_status);
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MRCC_voidSetPeripheralClock+0x94>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	79ba      	ldrb	r2, [r7, #6]
 8000aae:	2101      	movs	r1, #1
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	7979      	ldrb	r1, [r7, #5]
 8000aba:	79ba      	ldrb	r2, [r7, #6]
 8000abc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <MRCC_voidSetPeripheralClock+0x94>)
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	61d3      	str	r3, [r2, #28]
}
 8000ac8:	e012      	b.n	8000af0 <MRCC_voidSetPeripheralClock+0x88>
	else if (copy_u8Bus == RCC_APB2_BUS)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b0b      	cmp	r3, #11
 8000ace:	d10f      	bne.n	8000af0 <MRCC_voidSetPeripheralClock+0x88>
		INS_BIT(RCC->RCC_APB2ENR, copy_u8PeripheralNum, copy_periph_status);
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MRCC_voidSetPeripheralClock+0x94>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	79ba      	ldrb	r2, [r7, #6]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	43d2      	mvns	r2, r2
 8000ade:	4013      	ands	r3, r2
 8000ae0:	7979      	ldrb	r1, [r7, #5]
 8000ae2:	79ba      	ldrb	r2, [r7, #6]
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <MRCC_voidSetPeripheralClock+0x94>)
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6193      	str	r3, [r2, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <MSYSTICK_voidInit>:

void (*SYSTICK_CALLBACK)(void) = NULL;
u8 SYSTICK_ISR_TYPE_PERIODIC = 0;

void MSYSTICK_voidInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
#if SYSTICK_INPUT_SOURCE==SYSTICK_CLOCK_SOURCE_AHB
	SYSTICK_Frequency = RCC_AHB_Frequency;
#elif SYSTICK_INPUT_SOURCE == SYSTICK_CLOCK_SOURCE_AHB_8
	SYSTICK_Frequency = RCC_AHB_Frequency / 8;
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MSYSTICK_voidInit+0x34>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <MSYSTICK_voidInit+0x38>)
 8000b0c:	6013      	str	r3, [r2, #0]
#endif

	INS_BIT(SYSTICK->STK_CTRL, 2, SYSTICK_INPUT_SOURCE);
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MSYSTICK_voidInit+0x3c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <MSYSTICK_voidInit+0x3c>)
 8000b14:	f023 0304 	bic.w	r3, r3, #4
 8000b18:	6013      	str	r3, [r2, #0]
	INS_BIT(SYSTICK->STK_CTRL, 1, SYSTICK_INT_STATUS);
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MSYSTICK_voidInit+0x3c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <MSYSTICK_voidInit+0x3c>)
 8000b20:	f023 0302 	bic.w	r3, r3, #2
 8000b24:	6013      	str	r3, [r2, #0]

#if (SYSTICK_PRELOAD_VALUE)
	SYSTICK->STK_LOAD = SYSTICK_PRELOAD_VALUE;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <MSYSTICK_voidInit+0x3c>)
 8000b28:	220f      	movs	r2, #15
 8000b2a:	605a      	str	r2, [r3, #4]
#else
#error	SYSTICK_PRELOAD_VALUE in Configuration file must have a value
#endif
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	2000003c 	.word	0x2000003c
 8000b38:	20000044 	.word	0x20000044
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <MSYSTICK_voidDelay_MS>:
	CLR_BIT(SYSTICK->STK_CTRL, 0);

}

void MSYSTICK_voidDelay_MS(u32 Delay_In_MS)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	// load value then clear current value
	if (Delay_In_MS)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <MSYSTICK_voidDelay_MS+0x26>
	{
		SYSTICK->STK_LOAD = Delay_In_MS * (SYSTICK_Frequency / 1000);
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MSYSTICK_voidDelay_MS+0x64>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <MSYSTICK_voidDelay_MS+0x68>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	099b      	lsrs	r3, r3, #6
 8000b5a:	4914      	ldr	r1, [pc, #80]	; (8000bac <MSYSTICK_voidDelay_MS+0x6c>)
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	fb02 f303 	mul.w	r3, r2, r3
 8000b62:	604b      	str	r3, [r1, #4]
 8000b64:	e002      	b.n	8000b6c <MSYSTICK_voidDelay_MS+0x2c>
	}
	else // in case of the user entered 0
	{
		SYSTICK->STK_LOAD = 1;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MSYSTICK_voidDelay_MS+0x6c>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	605a      	str	r2, [r3, #4]
	}
	SYSTICK->STK_VAL = 0;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MSYSTICK_voidDelay_MS+0x6c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]

	// enable systick
	SET_BIT(SYSTICK->STK_CTRL, 0);
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MSYSTICK_voidDelay_MS+0x6c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <MSYSTICK_voidDelay_MS+0x6c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6013      	str	r3, [r2, #0]

	// wait to finish
	while (!GET_BIT(SYSTICK->STK_CTRL, 16));
 8000b7e:	bf00      	nop
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MSYSTICK_voidDelay_MS+0x6c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	0c1b      	lsrs	r3, r3, #16
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f8      	beq.n	8000b80 <MSYSTICK_voidDelay_MS+0x40>

	// disable systick
	CLR_BIT(SYSTICK->STK_CTRL, 0);
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MSYSTICK_voidDelay_MS+0x6c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a06      	ldr	r2, [pc, #24]	; (8000bac <MSYSTICK_voidDelay_MS+0x6c>)
 8000b94:	f023 0301 	bic.w	r3, r3, #1
 8000b98:	6013      	str	r3, [r2, #0]

}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000044 	.word	0x20000044
 8000ba8:	10624dd3 	.word	0x10624dd3
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <MSYSTICK_voidDelay_uS>:

void MSYSTICK_voidDelay_uS(u32 Delay_In_uS)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

	// load value then clear current value
	if (Delay_In_uS)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00b      	beq.n	8000bd6 <MSYSTICK_voidDelay_uS+0x26>
	{
		SYSTICK->STK_LOAD = Delay_In_uS * (SYSTICK_Frequency / 1000000);
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MSYSTICK_voidDelay_uS+0x64>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MSYSTICK_voidDelay_uS+0x68>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	0c9b      	lsrs	r3, r3, #18
 8000bca:	4914      	ldr	r1, [pc, #80]	; (8000c1c <MSYSTICK_voidDelay_uS+0x6c>)
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	604b      	str	r3, [r1, #4]
 8000bd4:	e002      	b.n	8000bdc <MSYSTICK_voidDelay_uS+0x2c>
	}
	else // in case of the user entered 0
	{
		SYSTICK->STK_LOAD = 1;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MSYSTICK_voidDelay_uS+0x6c>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	605a      	str	r2, [r3, #4]
	}
	SYSTICK->STK_VAL = 0;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MSYSTICK_voidDelay_uS+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]

	// enable systick
	SET_BIT(SYSTICK->STK_CTRL, 0);
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MSYSTICK_voidDelay_uS+0x6c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <MSYSTICK_voidDelay_uS+0x6c>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6013      	str	r3, [r2, #0]

	// wait to finish
	while (!GET_BIT(SYSTICK->STK_CTRL, 16));
 8000bee:	bf00      	nop
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MSYSTICK_voidDelay_uS+0x6c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	0c1b      	lsrs	r3, r3, #16
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f8      	beq.n	8000bf0 <MSYSTICK_voidDelay_uS+0x40>

	// disable systick
	CLR_BIT(SYSTICK->STK_CTRL, 0);
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MSYSTICK_voidDelay_uS+0x6c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <MSYSTICK_voidDelay_uS+0x6c>)
 8000c04:	f023 0301 	bic.w	r3, r3, #1
 8000c08:	6013      	str	r3, [r2, #0]

}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000044 	.word	0x20000044
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <SysTick_Handler>:
{
	return copy_timeMS * (SYSTICK_Frequency / 1000);
}

void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	if (SYSTICK_ISR_TYPE_PERIODIC == 0)
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <SysTick_Handler+0x3c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d111      	bne.n	8000c50 <SysTick_Handler+0x30>
	{
		// disable systick
		CLR_BIT(SYSTICK->STK_CTRL, 0);
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <SysTick_Handler+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <SysTick_Handler+0x40>)
 8000c32:	f023 0301 	bic.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]

		// disable Int
		CLR_BIT(SYSTICK->STK_CTRL, 1);
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <SysTick_Handler+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <SysTick_Handler+0x40>)
 8000c3e:	f023 0302 	bic.w	r3, r3, #2
 8000c42:	6013      	str	r3, [r2, #0]

		// load value then clear current value
		SYSTICK->STK_LOAD = 0;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SysTick_Handler+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
		SYSTICK->STK_VAL = 0;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Handler+0x40>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
	}

	SYSTICK_CALLBACK();
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Handler+0x44>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4798      	blx	r3

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000030 	.word	0x20000030
 8000c60:	e000e010 	.word	0xe000e010
 8000c64:	2000002c 	.word	0x2000002c

08000c68 <main>:

u8 arr2[] = { 0b00000, 0b00000, 0b00000, 0b11011, 0b11111, 0b11111, 0b01110,
		0b00100 };

int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af02      	add	r7, sp, #8
	MRCC_voidInit();
 8000c6e:	f7ff fe1d 	bl	80008ac <MRCC_voidInit>
	MRCC_voidSetPeripheralClock(RCC_GPIOB, RCC_STATUS_ON);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2103      	movs	r1, #3
 8000c76:	200b      	movs	r0, #11
 8000c78:	f7ff fef6 	bl	8000a68 <MRCC_voidSetPeripheralClock>
	MRCC_voidSetPeripheralClock(RCC_GPIOA, RCC_STATUS_ON);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2102      	movs	r1, #2
 8000c80:	200b      	movs	r0, #11
 8000c82:	f7ff fef1 	bl	8000a68 <MRCC_voidSetPeripheralClock>

	MGPIO_voidSetPortDirection(GPIO_PORTA, 0, 7, GPIO_MODE_OUTPUT_2_MHZ,
 8000c86:	2300      	movs	r3, #0
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fa6d 	bl	8000170 <MGPIO_voidSetPortDirection>
			GPIO_OUTPUT_CNFG_GP_PP);

	MGPIO_voidSetPinDirection(GPIO_PORTB, 0, GPIO_MODE_OUTPUT_2_MHZ,
 8000c96:	2300      	movs	r3, #0
 8000c98:	2202      	movs	r2, #2
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fa8d 	bl	80001bc <MGPIO_voidSetPinDirection>
			GPIO_OUTPUT_CNFG_GP_PP);
	MGPIO_voidSetPinDirection(GPIO_PORTB, 1, GPIO_MODE_OUTPUT_2_MHZ,
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff fa87 	bl	80001bc <MGPIO_voidSetPinDirection>
			GPIO_OUTPUT_CNFG_GP_PP);
	MGPIO_voidSetPinDirection(GPIO_PORTB, 5, GPIO_MODE_OUTPUT_2_MHZ,
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fa81 	bl	80001bc <MGPIO_voidSetPinDirection>
			GPIO_OUTPUT_CNFG_GP_PP);

	MSYSTICK_voidInit();
 8000cba:	f7ff ff21 	bl	8000b00 <MSYSTICK_voidInit>

	HLCD_voidInit();
 8000cbe:	f7ff fc35 	bl	800052c <HLCD_voidInit>

	HLCD_voidSendCommand(LCD_COMMAND_CLEAR_DISPLAY);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f7ff fc45 	bl	8000552 <HLCD_voidSendCommand>

	HLCD_voidSendData('N');
 8000cc8:	204e      	movs	r0, #78	; 0x4e
 8000cca:	f7ff fc6c 	bl	80005a6 <HLCD_voidSendData>
	HLCD_voidSendData('O');
 8000cce:	204f      	movs	r0, #79	; 0x4f
 8000cd0:	f7ff fc69 	bl	80005a6 <HLCD_voidSendData>
	HLCD_voidSendData('U');
 8000cd4:	2055      	movs	r0, #85	; 0x55
 8000cd6:	f7ff fc66 	bl	80005a6 <HLCD_voidSendData>
	HLCD_voidSendData('R');
 8000cda:	2052      	movs	r0, #82	; 0x52
 8000cdc:	f7ff fc63 	bl	80005a6 <HLCD_voidSendData>

	MSYSTICK_voidDelay_MS(1000);
 8000ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce4:	f7ff ff2c 	bl	8000b40 <MSYSTICK_voidDelay_MS>

	HLCD_voidSendCommand(LCD_COMMAND_CLEAR_DISPLAY);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fc32 	bl	8000552 <HLCD_voidSendCommand>

	HLCD_voidSendData('1');
 8000cee:	2031      	movs	r0, #49	; 0x31
 8000cf0:	f7ff fc59 	bl	80005a6 <HLCD_voidSendData>
	HLCD_voidSendData('2');
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f7ff fc56 	bl	80005a6 <HLCD_voidSendData>
	HLCD_voidSendData('3');
 8000cfa:	2033      	movs	r0, #51	; 0x33
 8000cfc:	f7ff fc53 	bl	80005a6 <HLCD_voidSendData>
	HLCD_voidSendData('4');
 8000d00:	2034      	movs	r0, #52	; 0x34
 8000d02:	f7ff fc50 	bl	80005a6 <HLCD_voidSendData>

	MSYSTICK_voidDelay_MS(1000);
 8000d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0a:	f7ff ff19 	bl	8000b40 <MSYSTICK_voidDelay_MS>

	HLCD_voidClearDisplay();
 8000d0e:	f7ff fce1 	bl	80006d4 <HLCD_voidClearDisplay>

	HLCD_voidDisplayString("hello");
 8000d12:	480f      	ldr	r0, [pc, #60]	; (8000d50 <main+0xe8>)
 8000d14:	f7ff fc71 	bl	80005fa <HLCD_voidDisplayString>

	HLCD_voidGoToPos(LCD_u8_LINE2, 0);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fce1 	bl	80006e2 <HLCD_voidGoToPos>

	HLCD_voidDisplayNumber(1254);
 8000d20:	f240 40e6 	movw	r0, #1254	; 0x4e6
 8000d24:	f7ff fc7e 	bl	8000624 <HLCD_voidDisplayNumber>

	HLCD_voidSendSpecialCharacter(arr, 0, LCD_u8_LINE2, 6);
 8000d28:	2306      	movs	r3, #6
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <main+0xec>)
 8000d30:	f7ff fcef 	bl	8000712 <HLCD_voidSendSpecialCharacter>

	HLCD_voidSendData(0);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fc36 	bl	80005a6 <HLCD_voidSendData>

	HLCD_voidSetSpecialCharacterPattern(arr2, 2);
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <main+0xf0>)
 8000d3e:	f7ff fd1e 	bl	800077e <HLCD_voidSetSpecialCharacterPattern>
	//HLCD_voidGoToPos(LCD_u8_LINE2, 8);

	HLCD_voidSendData(2);
 8000d42:	2002      	movs	r0, #2
 8000d44:	f7ff fc2f 	bl	80005a6 <HLCD_voidSendData>
	HLCD_voidSendData(2);
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f7ff fc2c 	bl	80005a6 <HLCD_voidSendData>

	while (1)
 8000d4e:	e7fe      	b.n	8000d4e <main+0xe6>
 8000d50:	08000e10 	.word	0x08000e10
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008

08000d5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d60:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d66:	490d      	ldr	r1, [pc, #52]	; (8000d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <LoopForever+0xe>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	; (8000da8 <LoopForever+0x16>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d8a:	f000 f811 	bl	8000db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8e:	f7ff ff6b 	bl	8000c68 <main>

08000d92 <LoopForever>:

LoopForever:
    b LoopForever
 8000d92:	e7fe      	b.n	8000d92 <LoopForever>
  ldr   r0, =_estack
 8000d94:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000da0:	08000e20 	.word	0x08000e20
  ldr r2, =_sbss
 8000da4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000da8:	20000048 	.word	0x20000048

08000dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC1_2_IRQHandler>
	...

08000db0 <__libc_init_array>:
 8000db0:	b570      	push	{r4, r5, r6, lr}
 8000db2:	2500      	movs	r5, #0
 8000db4:	4e0c      	ldr	r6, [pc, #48]	; (8000de8 <__libc_init_array+0x38>)
 8000db6:	4c0d      	ldr	r4, [pc, #52]	; (8000dec <__libc_init_array+0x3c>)
 8000db8:	1ba4      	subs	r4, r4, r6
 8000dba:	10a4      	asrs	r4, r4, #2
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	d109      	bne.n	8000dd4 <__libc_init_array+0x24>
 8000dc0:	f000 f81a 	bl	8000df8 <_init>
 8000dc4:	2500      	movs	r5, #0
 8000dc6:	4e0a      	ldr	r6, [pc, #40]	; (8000df0 <__libc_init_array+0x40>)
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <__libc_init_array+0x44>)
 8000dca:	1ba4      	subs	r4, r4, r6
 8000dcc:	10a4      	asrs	r4, r4, #2
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d105      	bne.n	8000dde <__libc_init_array+0x2e>
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dd8:	4798      	blx	r3
 8000dda:	3501      	adds	r5, #1
 8000ddc:	e7ee      	b.n	8000dbc <__libc_init_array+0xc>
 8000dde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000de2:	4798      	blx	r3
 8000de4:	3501      	adds	r5, #1
 8000de6:	e7f2      	b.n	8000dce <__libc_init_array+0x1e>
 8000de8:	08000e18 	.word	0x08000e18
 8000dec:	08000e18 	.word	0x08000e18
 8000df0:	08000e18 	.word	0x08000e18
 8000df4:	08000e1c 	.word	0x08000e1c

08000df8 <_init>:
 8000df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfa:	bf00      	nop
 8000dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dfe:	bc08      	pop	{r3}
 8000e00:	469e      	mov	lr, r3
 8000e02:	4770      	bx	lr

08000e04 <_fini>:
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	bf00      	nop
 8000e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e0a:	bc08      	pop	{r3}
 8000e0c:	469e      	mov	lr, r3
 8000e0e:	4770      	bx	lr
